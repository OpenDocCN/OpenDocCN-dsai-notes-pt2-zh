- en: P21：21. L5_5 Logistic Regression in Jupyter - Python小能 - BV1CB4y1U7P6
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P21：21. L5_5 逻辑回归在 Jupyter 中 - Python小能 - BV1CB4y1U7P6
- en: The first thing is， I'm going to look at some data that you can actually work
    with。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我将查看一些你实际上可以使用的数据。
- en: '![](img/99398885a29a308ee8a427b32d87e846_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99398885a29a308ee8a427b32d87e846_1.png)'
- en: '![](img/99398885a29a308ee8a427b32d87e846_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99398885a29a308ee8a427b32d87e846_2.png)'
- en: So we're going to work a fair amount in this course with a data set called fashion
    MNIST。 So who has heard of MNIST before？ So MNIST is this digit data set， 60，000
    observations， 10 classes。 And by now it's really been trained to this and you
    can typically get less than 1% error。 Now given that， it's not so interesting
    anymore to train on MNIST。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这门课程中，我们将大量使用一个名为时尚 MNIST 的数据集。那么，有谁听说过 MNIST 吗？MNIST 是一个数字数据集，包含 60,000 个样本，10
    个类别。现在，MNIST 已经被训练到非常成熟的程度，通常错误率可以低于 1%。但是，鉴于此，训练 MNIST 已经不再那么有趣了。
- en: And so at some point somebody said， well， hey， we still want to have a small
    data set。 so we can play with it easily。 But something a little bit more difficult。
    And so some guys at Solando decided that it would be a good idea to use clothes
    for， that。 So they designed this thing called fashion MNIST。 The good thing is，
    there's actually a -- oops。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 所以有一次，某人说，好吧，我们仍然希望有一个小的数据集，这样我们可以轻松地操作它。但也希望它稍微有些难度。所以，Solando 的一些人决定用衣物来做这个事。因此，他们设计了一个叫做时尚
    MNIST 的数据集。好处是，实际上有一个——哎呀。
- en: '![](img/99398885a29a308ee8a427b32d87e846_4.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99398885a29a308ee8a427b32d87e846_4.png)'
- en: '![](img/99398885a29a308ee8a427b32d87e846_5.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99398885a29a308ee8a427b32d87e846_5.png)'
- en: Okay， let's just -- let's even know that for now。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，让我们就这样——暂时先放那吧。
- en: '![](img/99398885a29a308ee8a427b32d87e846_7.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99398885a29a308ee8a427b32d87e846_7.png)'
- en: Okay。 And so we're just going to download this data set。 And the first thing
    it'll do is it'll actually go out and download it from S3。 Okay。 Let's hope we're
    on the network。 Yes， we are。 And then we'll find it'll get this done。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。所以我们只需要下载这个数据集。首先，它会去从 S3 下载数据。好吧。希望我们在网络上。是的，网络连接正常。然后我们会发现它会把这个下载完。
- en: '![](img/99398885a29a308ee8a427b32d87e846_9.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99398885a29a308ee8a427b32d87e846_9.png)'
- en: And then， okay， so I'm obviously not going to be able to show you this until
    it's done， downloading。 If you were to look at the size of it， well， you know，
    the training and the test set are， 60。000 and 10，000 each。 So that's exactly the
    same size as MNIST。 Then okay。 Once you have the data and this is -- the reason
    for showing you this is also to get a bit more。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，好吧，我显然无法在它下载完成之前展示给你。如果你看一下它的大小，你会发现，训练集和测试集分别有 60,000 和 10,000 个样本。所以这正好和
    MNIST 一样。然后好吧，一旦你有了数据，展示这个的原因也是让你了解更多。
- en: familiarity with the MXNet data format。 And so the data format contains， you
    know。 features and labels。 And in this case， feature shape is just going to be
    Uint8， NumPy。 data types and， you know， the labels are going to be， you know，
    just like lanes。 There's nothing particularly special there and you can index
    it just like any other way。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 熟悉 MXNet 数据格式。因此，这个数据格式包含了你知道的特征和标签。在这种情况下，特征的形状将是 Uint8 类型的 NumPy 数据类型，而标签将像数组一样。这没有什么特别的，你可以像其他任何数据集一样对它进行索引。
- en: '![](img/99398885a29a308ee8a427b32d87e846_11.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99398885a29a308ee8a427b32d87e846_11.png)'
- en: So let's see whether it's done。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 那么让我们看看它是否已经完成。
- en: '![](img/99398885a29a308ee8a427b32d87e846_13.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99398885a29a308ee8a427b32d87e846_13.png)'
- en: '![](img/99398885a29a308ee8a427b32d87e846_14.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99398885a29a308ee8a427b32d87e846_14.png)'
- en: Something's very funky about the network here。 Okay。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 网络这里有些问题。好吧。
- en: '![](img/99398885a29a308ee8a427b32d87e846_16.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99398885a29a308ee8a427b32d87e846_16.png)'
- en: So if you were to run this -- so these are the categories that you find， okay。
    Sneakers。 bags and ankle boots and， frankly， that's a special thing or sandals。
    You can go and plot it just as you would。 And so if -- I mean。 these are just
    some very simple functions。 This one just turns into labels and this one prints
    things。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你运行这个——这些是你可以找到的类别，好吧。运动鞋、包、踝靴，坦率地说，这些是特别的东西，或者是凉鞋。你可以像平常一样绘制它们。所以如果——我是说，这些只是一些非常简单的函数。这个函数只是将标签转换，而这个函数则打印结果。
- en: '![](img/99398885a29a308ee8a427b32d87e846_18.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99398885a29a308ee8a427b32d87e846_18.png)'
- en: And then you can -- okay。 Let's see。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以——好吧。让我们看看。
- en: '![](img/99398885a29a308ee8a427b32d87e846_20.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99398885a29a308ee8a427b32d87e846_20.png)'
- en: This takes forever。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要很长时间。
- en: '![](img/99398885a29a308ee8a427b32d87e846_22.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99398885a29a308ee8a427b32d87e846_22.png)'
- en: I have no idea why it's taking so long。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道为什么它花这么长时间。
- en: '![](img/99398885a29a308ee8a427b32d87e846_24.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99398885a29a308ee8a427b32d87e846_24.png)'
- en: Okay。 Okay。 I guess that's -- yeah。 Okay。 Fine。 So if you were to run the script
    at home and we'll put it up online。 you'll basically。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。好的。我猜这就是——是的。好的。没问题。所以如果你在家运行这个脚本，我们会把它放到网上。你基本上就会。
- en: '![](img/99398885a29a308ee8a427b32d87e846_26.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99398885a29a308ee8a427b32d87e846_26.png)'
- en: see pretty pictures of， you know， lower resolution sneakers or sandals or jackets，
    which isn't。 so exciting。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 看看那些漂亮的图片，你知道的，分辨率较低的运动鞋、凉鞋或夹克，这样看起来就没那么令人兴奋了。
- en: '![](img/99398885a29a308ee8a427b32d87e846_28.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99398885a29a308ee8a427b32d87e846_28.png)'
- en: Okay。 But anyway， you can get that。 Then you can go and， you know， you can load
    this thing。 Now in order to load it， it's actually quite interesting。 You can
    transform the data。 So as you're loading the data in， we have a couple of predefined
    standard transformations。 namely to turn things into， you know， an MXNet Tensor，
    an NDRA。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。无论如何，你可以获取这个数据。然后你可以去，你知道的，加载这个东西。现在为了加载它，其实非常有趣。你可以转换数据。所以在加载数据时，我们有几个预定义的标准转换，即将数据转化为，你知道的，MXNet
    Tensor，NDRA。
- en: And then you use these or at the point when you import the data。 Now this is
    nice because you can。 for instance， have transformers which， you know， crop the，
    data， distort it， renormalize it。 down-samplate， up-samplate， perform a lot of
    other tricks。 And you can do that in the background and you don't need to worry
    about that in the actual。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你在导入数据时使用这些。现在这个很好，因为你可以，比如，使用变换器，进行裁剪、扭曲、重新标准化数据，降采样、升采样，执行许多其他技巧。而且你可以在后台进行这些操作，在实际使用中不需要担心这些。
- en: training loop。 And yeah。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 训练循环。是的。
- en: '![](img/99398885a29a308ee8a427b32d87e846_30.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99398885a29a308ee8a427b32d87e846_30.png)'
- en: So that's basically what those data loaders do。 And that's about all you would
    see。 now if I were to load this data and， as I said， I， have no idea why it's
    not done。 it would iterate through all the data in about three， and a half seconds
    on this laptop。 Okay。 Fine。 Let's put Smether's light。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这基本上就是这些数据加载器的作用。大概就是你会看到的全部。现在，如果我要加载这些数据，并且正如我所说，我不知道为什么它没有完成，它会在大约三秒半的时间内遍历所有数据，使用这台笔记本电脑。好的。没问题。让我们放一些Smether的光。
- en: '![](img/99398885a29a308ee8a427b32d87e846_32.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99398885a29a308ee8a427b32d87e846_32.png)'
- en: Problem because I need this data to show you how to actually do regression。
    Let's postpone that until Thursday。 Instead of that。 we're going to do a little
    bit of information theory。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是，我需要这些数据来展示如何做回归。我们把这个推迟到星期四。代替这个，我们将做一些信息理论的内容。
- en: '![](img/99398885a29a308ee8a427b32d87e846_34.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99398885a29a308ee8a427b32d87e846_34.png)'
- en: Okay。 So apologies for that。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。为此道歉。
