- en: P19：Monte Carlo - Basis Functions - 兰心飞侠 - BV14P4y1u7TB
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P19：蒙特卡洛 - 基函数 - 兰心飞侠 - BV14P4y1u7TB
- en: In the last lesson we derived an algorithmic solution to the problem of optimal
    hedging and pricing in our MDP option pricing model。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上节课中，我们推导了MDP期权定价模型中最优对冲和定价问题的算法解。
- en: '![](img/83fc990ebb7317a2bd88ac6d931c00f7_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/83fc990ebb7317a2bd88ac6d931c00f7_1.png)'
- en: To remind you these equations， they are given again here。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提醒您这些方程，它们在这里再次给出。
- en: '![](img/83fc990ebb7317a2bd88ac6d931c00f7_3.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](img/83fc990ebb7317a2bd88ac6d931c00f7_3.png)'
- en: So the backward recursion algorithm says that we have to run two equations shown
    here backwards in time starting from time capital T minus 1 and all the way back
    to the current time T。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 所以反向递归算法表示我们必须从时间点T减去1开始，向回执行这里显示的两个方程，直到当前时间T。
- en: '![](img/83fc990ebb7317a2bd88ac6d931c00f7_5.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/83fc990ebb7317a2bd88ac6d931c00f7_5.png)'
- en: But as we already noticed on several occasions， these relations involve different
    conditional expectations。 So the question would be how we should compute these
    conditional expectations。 Now I would like to remind you that here we assume a
    Monte Carlo setting where a conditional conditioning informational set at time
    team that we called earlier F sub T is given by a set of all Monte Carlo paths
    up to up to time team。 So with this definition of conditional expectations， all
    is left to learn is how to compute them。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 但正如我们在多个场合已经注意到的，这些关系涉及不同的条件期望。那么问题是，我们应该如何计算这些条件期望？现在，我想提醒您，这里我们假设一个蒙特卡洛设置，其中在时间点团队下，我们之前称之为F
    sub T的信息条件集由所有蒙特卡洛路径组成，直到时间点团队为止。因此，使用这种条件期望的定义，剩下要学习的就是如何计算它们。
- en: Let's take a look first at how such expectations could be calculated in a discrete
    state setting。 We have mentioned in the last lesson that we could discretize if
    we wanted our MDP model using a Markov chain approximation to the Black Scholes
    model。 In this setting， we would have a finite set XM of different admissible
    values of the state variable X team。 where N would run between one and one and
    M and M would be the number of states in our discrete state setting。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看看如何在离散状态设置中计算这样的期望值。我们在上节课提到过，如果我们想要使用马尔可夫链逼近布莱克-斯科尔斯模型，我们可以对MDP模型进行离散化。在这种设置下，我们会有一个有限的状态变量X团队的不同可接受值XM，其中N的取值范围为1到M，M是我们离散状态设置中的状态数。
- en: We would then have some values QN at this node。 These values can also be thought
    of as discrete valued function of a discrete value argument X team。 Now we can
    use an index free notation shown here to write it as a discrete valued function
    of X。 We simply take a sum of all QN's multiplied by the value of chronicle symbol
    of X and XN。 which is equal to one when X is equal to XN and equal zero otherwise。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将在这个节点上得到一些QN的值。这些值也可以看作是离散值参数X团队的离散值函数。现在我们可以使用这里显示的无索引符号，将其写成X的离散值函数。我们简单地将所有QN乘以X和XN的**克罗内克符号**的值求和。当X等于XN时，这个值等于1，否则等于0。
- en: This formula simply produces an identity for each possible value of X that can
    appear as an argument of QX。 But the advantage of using such formula is that it's
    now valid for any input X。 similar to vector valued expressions in linear algebra
    that are valid for all elements of a vector。 We can now replace the delta symbol
    in this sum by a bit more suggestive notation phi N of X。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这个公式简单地为QX的每个可能的X值生成一个恒等式。但使用这个公式的好处是，现在它对任何输入X都有效，类似于线性代数中对向量的所有元素有效的向量值表达式。我们现在可以在这个求和式中用更具提示性的符号phi
    N of X代替delta符号。
- en: which splits the two arguments of the delta symbol。 And so phi N of X is computed
    the same way as the delta symbol。 but now we can interpret it as what is called
    one-hot encoding of feature X。 How does this work？
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 它将delta符号的两个参数分开。因此，phi N of X的计算方式与delta符号相同。但现在我们可以将其解释为X特征的**独热编码**。这怎么运作呢？
- en: Let's take some fixed value of M and consider the function phi N of X for this
    M。 Now for a given input X， this function will be equal zero unless X can size
    with the node value XN。 Functions with such one-hot encoding can be called one-hot
    basis functions。 And the whole sum for QX can now be interpreted as an expansion
    in these basis functions。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑M的一个固定值，并为这个M考虑phi N of X函数。现在，对于给定的输入X，除非X与节点值XN匹配，否则这个函数的值为零。具有这种**独热编码**的函数可以称为**独热基函数**。现在，QX的整个求和可以解释为这些基函数的展开。
- en: You may wonder what's the point of looking at such expansion given then it's
    extremely sparse。 In fact， only one value in the whole sum is nonzero here。 Well，
    this is certainly true。 but the main point of writing things this way is that
    it can now be generalized to a continuous state formulation。 All we need to do
    for a continuous state case， which is our assumed setting here。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，既然这种展开非常稀疏，那么研究它的意义何在？事实上，在整个求和中，只有一个值是非零的。这个说法当然是正确的。但以这种方式写出来的主要目的是，它现在可以推广到连续状态的形式。我们所需要做的，对于一个连续状态的情况，就是我们假设的设定。
- en: here is to replace delta peak-like basis functions that we had in the discrete
    state case。 By there are smooth-doubt versions。 Here you can see a set of 12 basis
    functions that we will be using going forward。 This is not the only choice for
    a continuous space formulation。 but is a very convenient one and we'll solve our
    needs， so we will stick to this one going forward。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是将我们在离散状态下使用的类似delta峰值的基函数替换掉。现在有了平滑的版本。这里你可以看到我们将用到的一组12个基函数。这并不是连续空间公式的唯一选择，但它是一个非常方便的选择，能满足我们的需求，因此我们将继续使用它。
- en: These basis functions are called B-splines。 Let's talk a bit on how these B-splines
    are constructed。 B-splines are very useful for problems of interpolation when
    we want to interpolate some function between node points X0 to Xm by a continuous
    and smooth-spline function of order n。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些基函数被称为B样条。让我们简单讨论一下这些B样条是如何构建的。B样条在插值问题中非常有用，当我们想通过一个连续和平滑的阶数为n的样条函数，在节点点X0到Xm之间插值某个函数时。
- en: With these splines， this is done as holes。 First， with additional node points。
    X sub minus n to X sub minus 1 to the left of X0 and nodes X sub m plus 1 to X
    sub m plus m to the right of point Xm。 Next， we define a set of B-splines， B sub
    i and n of X， recursively。 To this end。 first we take n equal to 0 and set B-i
    of n of X equal 1 if X is in the interval between Xi and Xi plus 1 and set it
    to 0 otherwise。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 利用这些样条，操作是通过插入节点点来完成的。首先，添加额外的节点点，X子- n到X子-1位于X0的左侧，节点X子m+1到X子m+m位于Xm点的右侧。接着，我们递归地定义一组B样条，B子i和n的X。为此，首先我们取n等于0，并设置B-i的n的X等于1，当X在Xi和Xi+1之间的区间时，如果不是则设为0。
- en: Then we define B sub i and n larger than 0 by the accuracy formula shown here。
    This formula applies for X in the interval Xi to X sub i plus n plus 1。 Outside
    of this interval。 B-spline B， i， n is 0。 As you can see from this formula， if
    we take n equal to 3。 then B-i and n are non-negative cubic polynomials。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过这里展示的精度公式定义了B子i和n大于0的值。这个公式适用于X在区间Xi到Xi+n+1之间。这个区间外，B样条B，i，n为0。如你从公式中看到的，如果我们取n等于3，那么B-i和n就是非负的三次多项式。
- en: These B-splines are called cubic B-splines and we will use them going forward。
    So B-splines are very useful because they are non-negative。 they integrate to
    1 and are only non-zero on intervals Xi to X sub i plus n plus 1。 Therefore。 they
    form a good basis for non-negative quantities。 If all coefficients are non-negative。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这些B样条被称为三次B样条，接下来我们将使用它们。所以B样条非常有用，因为它们是非负的。它们的积分为1，并且只在区间Xi到Xi+n+1上非零。因此，它们为非负量提供了很好的基础。如果所有系数都是非负的。
- en: the whole expression will be non-negative as the basis functions themselves
    are non-negative。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 整个表达式将是非负的，因为基函数本身是非负的。
- en: '![](img/83fc990ebb7317a2bd88ac6d931c00f7_7.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/83fc990ebb7317a2bd88ac6d931c00f7_7.png)'
- en: So B-splines offer a very good choice of basis functions but this is not the
    only choice。 Other specifications have been also considered in the literature。
    For example。 we could use Fourier cosine basis or a wavelet basis。 A harder question
    though is how to pick a set of basis functions when we have not just one but many
    stocks。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 所以B样条提供了一个非常好的基函数选择，但这不是唯一的选择。文献中也考虑了其他规格。例如，我们可以使用傅里叶余弦基函数或小波基函数。一个更困难的问题是，如何选择一组基函数，当我们不仅仅有一个，而是有多个股票时。
- en: We'll be dealing with these more complex settings later on when we consider
    multi-acid portfolios。 But for now we will continue with our single stock portfolio
    for an option on a single underline as it will keep us busy for the time being。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们考虑多资产组合时，我们将处理这些更复杂的设置。但目前我们将继续关注单一股票组合和单一标的期权，因为这将暂时占据我们的精力。
- en: '![](img/83fc990ebb7317a2bd88ac6d931c00f7_9.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/83fc990ebb7317a2bd88ac6d931c00f7_9.png)'
- en: '[BLANK_AUDIO]。'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[BLANK_AUDIO]。'
- en: '![](img/83fc990ebb7317a2bd88ac6d931c00f7_11.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/83fc990ebb7317a2bd88ac6d931c00f7_11.png)'
