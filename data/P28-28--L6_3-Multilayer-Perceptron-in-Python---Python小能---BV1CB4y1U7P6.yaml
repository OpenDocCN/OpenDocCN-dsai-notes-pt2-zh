- en: P28：28. L6_3 Multilayer Perceptron in Python - Python小能 - BV1CB4y1U7P6
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P28：28. L6_3 多层感知器在 Python 中的实现 - Python小能 - BV1CB4y1U7P6
- en: So let's implement an MLP from scratch。 So I'm going to just do the usual thing。
    I， you know。 import nd array。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们从零开始实现一个多层感知器（MLP）。我将做一些常规操作。你知道的，导入 nd array。
- en: '![](img/1043b15cf28850f9f82bab9eff0789a5_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1043b15cf28850f9f82bab9eff0789a5_1.png)'
- en: And I load the fresh nomeness dataset。 So this is exactly the same code as before。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我加载了新的数据集。其实这和之前的代码完全一样。
- en: '![](img/1043b15cf28850f9f82bab9eff0789a5_3.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1043b15cf28850f9f82bab9eff0789a5_3.png)'
- en: So this should be utterly boring。 Now the more interesting thing is， i go and
    initialize the。 Model parameter。 So this is for a deep network with one hidden
    layer。 And in that hidden layer。 i'm assuming that i have 256， Hidden units。 So
    the first weight matrix is going to be inputs times。 Hidden units。 The second
    one is Hidden units times outputs， right？
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这个部分应该完全无聊。现在更有趣的部分是，我开始初始化模型的参数。这个用于一个有一个隐藏层的深度网络。在这个隐藏层中，我假设有 256 个隐藏单元。所以第一个权重矩阵是输入乘以隐藏单元，第二个是隐藏单元乘以输出，对吧？
- en: Because i need to change the dimensionality appropriately。 So my biases are
    correspondingly number of hidden units in， Number of outputs。 So in other words。
    my parameter vector is just one array， Containing w1， w2， and b2。 So now all i'm
    doing is iterate through all those parameters and。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我需要适当地改变维度。所以我的偏置也相应地是隐藏单元的数量和输出的数量。换句话说，我的参数向量就是一个数组，包含 w1、w2 和 b2。所以现在我做的就是迭代所有这些参数。
- en: Attach the gradients to each of them。 Because we want to learn them。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 将梯度附加到每一个参数上，因为我们需要对它们进行学习。
- en: '![](img/1043b15cf28850f9f82bab9eff0789a5_5.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1043b15cf28850f9f82bab9eff0789a5_5.png)'
- en: So then i need to invent my value。 So this just does nothing else than just
    returns the max。 Between zero and x。 And by virtue of broadcast， it will always
    return an object of。 The same structure as before。 Okay。 Just do that。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我需要发明我的值。这个函数的作用仅仅是返回 0 和 x 之间的最大值。由于广播机制，它将始终返回与之前相同结构的对象。好了，做这个吧。
- en: '![](img/1043b15cf28850f9f82bab9eff0789a5_7.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1043b15cf28850f9f82bab9eff0789a5_7.png)'
- en: Did i -- yeah， i did initialize this。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我是不是……对，我已经初始化了这个。
- en: '![](img/1043b15cf28850f9f82bab9eff0789a5_9.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1043b15cf28850f9f82bab9eff0789a5_9.png)'
- en: Okay， good。 My model is very simple。 I first flatten out x because initially
    that's a 28 by 28。 Pixel's image。 So i need to turn this into a single vector。
    So i can reshape this。 It's actually also called flattened but reshaped this，
    You know， just the more general thing。 And so then h is just a value。 That's the
    hidden units。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，很好。我的模型非常简单。我首先将 x 展平，因为最初它是一个 28x28 的像素图像。所以我需要将其转换为一个单一的向量。这样我就可以对其进行重塑。其实这也叫做展平，但更通用的说法是重塑。然后
    h 只是一个值，表示隐藏单元。
- en: So i'm going to use a value of inner product between x and， W plus bias。 And
    then i return d inner product between h and w2 and the bias。 So it's exactly the
    same thing as what we had before for， you， Know。 our simple softmax linear regression
    model。 Except that now we have a hidden unit。 Oops。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我将使用 x 和 W 加偏置之间的内积作为值，然后返回 h 和 w2 以及偏置之间的内积。实际上这和我们之前的简单 softmax 线性回归模型完全一样。只不过现在我们有了隐藏单元。哦不。
- en: And i -- yeah， around this。 The only thing where i'm going to cheat is i'm going
    to use the。 built-in softmax loss and that has to do with the micro， Stability。
    Otherwise the code would just be a little bit tedious。 Okay。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我……对，就这样。我唯一会“作弊”的地方是，我会使用内置的 softmax 损失函数，这跟微分稳定性有关。否则代码就会稍微有点繁琐。好了。
- en: '![](img/1043b15cf28850f9f82bab9eff0789a5_11.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1043b15cf28850f9f82bab9eff0789a5_11.png)'
- en: But that's exactly the same losses before。 And the training routine。 the training
    code is actually the， Same code as what we saw before。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 但这和之前的损失函数完全一样。训练流程和训练代码其实跟之前看到的完全一样。
- en: '![](img/1043b15cf28850f9f82bab9eff0789a5_13.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1043b15cf28850f9f82bab9eff0789a5_13.png)'
- en: So it's just that i'm now providing it with a different， Network。 Same loss
    function actually。 Ten iterations。 And that's about it。 And different set of parameters。
    So the only thing that's changed between using glue on or doing。 Things from scratch
    is really just in one case。 I implemented the network architecture from scratch
    in the。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 所以就是这样，我现在为它提供了一个不同的网络。实际上，损失函数是相同的。十次迭代，仅此而已。而且参数集不同。所以在使用 glue 还是从零开始做事情之间唯一的区别是，在一个情况下，我从零开始实现了网络架构。
- en: Other case。 I'm just using something that's very pretty fine。 Okay。 And if you
    remember the loss that we have before， now it's， A little bit better， right？
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个案例。我只是在使用一些非常精细的东西。好的。如果你记得我们之前的损失，现在稍微有一点改善，对吧？
- en: So we are at 。88。 Yes。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们在。88。是的。
- en: '![](img/1043b15cf28850f9f82bab9eff0789a5_15.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1043b15cf28850f9f82bab9eff0789a5_15.png)'
- en: That's about where we got to。 So that's an improvement due to a better architecture。
    Now if i played around with the architecture a bit more and， A number of iterations。
    i could probably get something better。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 大致就是我们到达的地方。所以这是由于更好的架构带来的改进。如果我再调整一下架构，进行几次迭代，可能会得到更好的结果。
- en: '![](img/1043b15cf28850f9f82bab9eff0789a5_17.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1043b15cf28850f9f82bab9eff0789a5_17.png)'
- en: And then if i look at things， so this is exactly what you。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然后如果我看一下这些，这正是你所做的。
- en: '![](img/1043b15cf28850f9f82bab9eff0789a5_19.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1043b15cf28850f9f82bab9eff0789a5_19.png)'
- en: Have before， well， it's really hard to tell from this picture。 Whether it actually
    works better or not because we got maybe， You know。 a 3-4% improvement and we're
    only showing ten， Observations but， yeah， okay。 It's making slightly different
    mistakes now。 So let's say， i want to show this。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如之前所说，嗯，从这张图来看真的很难判断它是否真的工作得更好，因为我们可能只获得了3-4%的改进，而且我们只展示了十个观察值，但，嗯，好吧。它现在犯了些略微不同的错误。所以假设，我想展示这个。
- en: '![](img/1043b15cf28850f9f82bab9eff0789a5_21.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1043b15cf28850f9f82bab9eff0789a5_21.png)'
- en: Okay。 Different things and， yeah， it will mistake kelts for bags now but， That's
    maybe progress。 Okay。 Any questions about how to build an mlp from scratch here？
    Okay。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。不同的东西，嗯，现在它会把kelts误认成包，但这也许算是进步。好了，关于如何从零开始构建MLP有问题吗？好的。
- en: '![](img/1043b15cf28850f9f82bab9eff0789a5_23.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1043b15cf28850f9f82bab9eff0789a5_23.png)'
- en: Cool。 Then let's move on to the --， [BLANK_AUDIO]。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 很酷。那我们继续前进到——，[BLANK_AUDIO]。
- en: '![](img/1043b15cf28850f9f82bab9eff0789a5_25.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1043b15cf28850f9f82bab9eff0789a5_25.png)'
- en: '![](img/1043b15cf28850f9f82bab9eff0789a5_26.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1043b15cf28850f9f82bab9eff0789a5_26.png)'
- en: '[BLANK_AUDIO]， [BLANK_AUDIO]， [BLANK_AUDIO]， [BLANK_AUDIO]， [BLANK_AUDIO]，
    [BLANK_AUDIO]。 [BLANK_AUDIO]， [BLANK_AUDIO]， [BLANK_AUDIO]， [BLANK_AUDIO]， [BLANK_AUDIO]，
    [BLANK_AUDIO]。'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[BLANK_AUDIO]，[BLANK_AUDIO]，[BLANK_AUDIO]，[BLANK_AUDIO]，[BLANK_AUDIO]，[BLANK_AUDIO]。[BLANK_AUDIO]，[BLANK_AUDIO]，[BLANK_AUDIO]，[BLANK_AUDIO]，[BLANK_AUDIO]，[BLANK_AUDIO]。'
- en: '![](img/1043b15cf28850f9f82bab9eff0789a5_28.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1043b15cf28850f9f82bab9eff0789a5_28.png)'
- en: '[BLANK_AUDIO]， [BLANK_AUDIO]。'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[BLANK_AUDIO]，[BLANK_AUDIO]。'
- en: '![](img/1043b15cf28850f9f82bab9eff0789a5_30.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1043b15cf28850f9f82bab9eff0789a5_30.png)'
- en: '[BLANK_AUDIO]， [BLANK_AUDIO]。'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[BLANK_AUDIO]，[BLANK_AUDIO]。'
- en: '![](img/1043b15cf28850f9f82bab9eff0789a5_32.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1043b15cf28850f9f82bab9eff0789a5_32.png)'
- en: '[BLANK_AUDIO]， [BLANK_AUDIO]， [BLANK_AUDIO]， [BLANK_AUDIO]。'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[BLANK_AUDIO]，[BLANK_AUDIO]，[BLANK_AUDIO]，[BLANK_AUDIO]。'
- en: '![](img/1043b15cf28850f9f82bab9eff0789a5_34.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1043b15cf28850f9f82bab9eff0789a5_34.png)'
- en: '[BLANK_AUDIO]， [BLANK_AUDIO]， [BLANK_AUDIO]。'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[BLANK_AUDIO]，[BLANK_AUDIO]，[BLANK_AUDIO]。'
- en: '![](img/1043b15cf28850f9f82bab9eff0789a5_36.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1043b15cf28850f9f82bab9eff0789a5_36.png)'
- en: '[BLANK_AUDIO]， [BLANK_AUDIO]， [BLANK_AUDIO]， [BLANK_AUDIO]， [BLANK_AUDIO]。'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[BLANK_AUDIO]，[BLANK_AUDIO]，[BLANK_AUDIO]，[BLANK_AUDIO]，[BLANK_AUDIO]。'
- en: '![](img/1043b15cf28850f9f82bab9eff0789a5_38.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1043b15cf28850f9f82bab9eff0789a5_38.png)'
