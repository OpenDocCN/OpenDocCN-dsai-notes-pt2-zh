- en: P12：12. L3_1 Sampling - Python小能 - BV1CB4y1U7P6
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P12：12. L3_1 抽样 - Python小能 - BV1CB4y1U7P6
- en: Okay。 So this is the leftover from Thursday's class， namely sampling。 So， I
    mean， one of。 the obvious things that you probably have gotten used to as a decision
    is how to sample， right？
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。这是周四课上剩下的内容，即抽样。所以，我的意思是，你们可能已经习惯了一个决定性的操作，那就是如何进行抽样，对吧？
- en: Who has implemented a sample before in their life？ Okay。 After this homework，
    all the hands。 will go up because implementing a sample will be one of the home
    works that you'll have， to do。 Okay。 So， what's the simplest distribution I could
    pick？ Well， actually， a uniform distribution。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你们有没有在生活中实现过一个样本？好吧。在做完这个作业后，所有的手都会举起来，因为实现一个样本将是你们需要做的作业之一。好的。那么，我能选什么最简单的分布呢？嗯，实际上是一个均匀分布。
- en: '![](img/f574eb9fdde9c7a3eae6082f0302a43e_1.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f574eb9fdde9c7a3eae6082f0302a43e_1.png)'
- en: is pretty simple， right？ So in a uniform distribution， well， what I have is，
    I just say， well， you。 know， there's some interval from L to U， lower to upper
    bound。 And within that interval， all。 values occur with equal probability。 And
    outside of that， nothing happens。 Your typical uniform。 random number generators
    will look like that。 And so if you draw from that maybe 10， 100。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这很简单，对吧？在均匀分布中，嗯，我做的是，我只需要说，好吧，你知道，有一个区间从L到U，也就是从下界到上界。在这个区间内，所有值发生的概率是相等的。超出这个区间，什么也不会发生。你典型的均匀随机数生成器就是这样。如果从中抽取10次，100次。
- en: and 1000 times， you get something that is starting to look increasingly， well，
    uniform， but not。 quite。 I mean， obviously， I didn't quite draw this with infinitism，
    really small bins because。 otherwise the lines would be infinitism， really narrow。
    So you can see some stuff that's a little。 bit taller。 So I quantize at some point。
    But this is essentially what happens if you draw。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我重复1000次，你会看到结果开始看起来越来越均匀，但还不完全均匀。我的意思是，显然我没有画得足够细，因为如果画得足够细，线条会非常窄。所以你会看到一些地方稍微高一些。我会在某个点进行量化。但这本质上就是从均匀分布中抽样的结果。稍后我们会在实际中看到这个过程。
- en: '![](img/f574eb9fdde9c7a3eae6082f0302a43e_3.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f574eb9fdde9c7a3eae6082f0302a43e_3.png)'
- en: from uniform distribution。 And we'll see that in practice in a moment。 Now，
    the slightly。 more interesting thing is drawing from a discrete distribution。
    So this is a really stupid language。 model， right？ So this language model has
    six words。 The and how C is white A。 Well， okay。 it doesn't make a lot of sense，
    but I've just attached some probabilities to that， right？
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，稍微有趣一点的情况是，从离散分布中抽样。所以这是一个非常愚蠢的语言模型，对吧？这个语言模型有六个词：the、and、how、C、is、white、A。嗯，好吧，这些词语没有什么意义，但我已经给它们附上了一些概率，对吧？
- en: Maybe the word that occurs with 10% and the word and with 5%。 And so what I
    could do is。 I could just sample from that distribution by brute force in linear
    time。 Okay。 So how。 would I do that？ I mean， so the first thing is let's assume
    that those numbers actually。 add up to one。 If they don't， then it's kind of awkward，
    but let's just assume that。 Well。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 也许某个词的出现概率是10%，而另一个词的出现概率是5%。所以，我可以通过暴力方法，从这个分布中抽样，时间复杂度是线性的。好的。那么，我该怎么做呢？我的意思是，首先我们假设这些数字加起来确实是1。如果它们不加起来是1，那么就有点尴尬了，但我们就假设它们加起来是1吧。
- en: what I can do is I can just take a random variable that's between zero and one。
    And so。 I'll draw and maybe I draw something here。 Okay。 And then I just iterate
    through that， entire array。 And I subtract zero point one from it。 I then subtract
    zero point zero， point zero five from it。 subtract another zero point zero five，
    subtract point one， subtract， point two。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以做的是，取一个介于零和一之间的随机变量。然后，我可能在这里抽取一个值。好的。接着我就遍历整个数组，并从中减去0.1，再减去0.05，再减去0.05，再减去0.1，再减去0.2。
- en: And now all of a sudden for the next subtraction， I end up with something that's，
    less than zero。 In other words， I just keep on subtracting from the number from
    the random， variable。 all the various probabilities until I end up with something
    that's less than zero。 And now I know that I've hit that interval。 So this is
    how you can draw from a discrete。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然后突然在下一次减法时，我得到一个小于零的值。换句话说，我只是继续从随机变量中减去所有的概率，直到得到一个小于零的值。现在我知道我已经进入了那个区间。所以，这就是你如何从离散分布中抽样的过程。
- en: probability distribution。 Now this is hideously expensive， right？ Because if
    I have in outcomes。 I need to draw on average about in over two items。 Okay。 Does
    somebody know how I would。 need to reorder this probability distribution up there
    in order to minimize the number of。 subtractions？ Okay。 Exactly。 I would sort
    this from the largest to the smallest one。 So this way。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 概率分布。现在，这个代价非常高，对吧？因为如果我有n个结果，我需要平均抽取大约n/2次。好吧，有人知道我该如何重新排列上面这个概率分布，以便最小化减法的次数吗？好的，确切地说，我会将它从最大到最小排序。这样做的话……
- en: because it's， you know， I would， because basically something out here requires。
    all these operations up here， right？ So this will give me an algorithm that can
    be faster。 than linear time， especially if I have， if most of my events are with
    very， very small， probability。 then I really only care about the large chunks
    and only occasionally I need。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你知道，我会这么做，因为基本上这里的某些东西需要所有这些操作，对吧？所以这将给我一个比线性时间更快的算法，特别是如果我大多数事件的概率非常非常小，那么我真的只关心大的块，只偶尔需要处理……
- en: to pay something a little bit more expensive。 Now that's not a bad idea， but
    you can do better。 So one way how to do better in order to get something that
    works in log time is if I build， a heap。 So if I have my entire set of probabilities，
    stuff like this， I go and combine them here。 combine them here， and I perform
    the sum of those two， sum of those two and so on going， up this。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 付出稍微多一点的费用。这不是一个坏主意，但你可以做得更好。所以，做得更好的一个方法是，如果我构建一个堆。假设我有整个概率集，像这样，我把它们组合在一起。将它们组合在这里，然后我对这两个进行求和，对这两个进行求和，以此类推，直到向上。
- en: Now if I then walk down this heap， well if my random variable is larger than。
    the sum of these terms， I know I need to be over here。 So this is really just
    implementing。 binary search。 Okay。 Puzzle question for you。 It's not in the homework，
    but it's an。 interesting question for you to think about。 Can I construct this
    heap in place here without。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果我沿着这个堆向下走，嗯，如果我的随机变量大于这些项的和，我就知道我需要在这里。所以，这实际上就是实现了二分查找。好的，给你们一个难题。这不是作业内容，但这是一个有趣的问题，值得你们思考。我可以在这里就地构建这个堆吗？
- en: needing more than in entries？ I mean obviously it has to be possible because
    this is， these。 are linear combinations of those numbers， right？ So if I have
    in numbers here， in numbers。 there will have to do。 So think about it， what data
    structure and what conditions you would， have。 This is probably a fun question
    anyway to ponder about。 It's not totally idle because。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 需要超过n个条目？我的意思是，显然这必须是可能的，因为这些是这些数字的线性组合，对吧？所以，如果我这里有n个数字，那里有n个数字，就必须这么做。那么想想看，你会用什么数据结构以及什么条件。这个问题可能是个有趣的问题，无论如何值得思考。它不是完全无用的，因为……
- en: if you design any samplers， maybe for your projects or later on in your career，
    you may。 very well need to come back to such data structures。 There are lots of
    other fancy data structures。 beyond that。 If you take any class on MCMC methods
    and numerically focused ones， they。 would probably look into tricks like that
    as well。 So this is useful。 In many cases。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你设计任何采样器，也许是为了你的项目，或者在你未来的职业生涯中，你可能会非常需要回到这种数据结构。还有很多其他的复杂数据结构，超出了这一点。如果你上任何关于MCMC方法的课程，尤其是那些注重数值计算的课程，它们可能也会研究像这样的技巧。所以，这在很多情况下是有用的。
- en: math can get you easily orders of magnitude speed up。 Good code might get you
    maybe 50%， speed up。 Okay。 Now of course we are going to estimate those probabilities
    later and。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 数学可以轻松地让你在数量级上提升速度。好的代码可能只能让你提升50%的速度。好的，现在当然，我们稍后会估计这些概率。
- en: '![](img/f574eb9fdde9c7a3eae6082f0302a43e_5.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f574eb9fdde9c7a3eae6082f0302a43e_5.png)'
- en: we are just going to use this off max for it。 Now if we roll a dice， similar
    picture to， before。 you know if I roll it 12 times， you would expect that everything
    occurs twice。 but for instance the twos don't occur at all。 And so only as we
    draw more and more， we get。 something that's closer to the average。 Okay。 We'll
    look exactly at that rate of conversion。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只会使用这个最大值来进行计算。现在，如果我们掷骰子，之前的情形是类似的。你知道，如果我掷12次，你会期望每个结果出现两次。但例如，2并没有出现过一次。所以，只有当我们抽取更多时，我们才会得到接近平均值的结果。好的，我们将精确地观察这个转换率。
- en: in a moment。 But yeah， these guys are clearly bad。 Now another thing is a normal
    distribution。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 片刻。但对，显然这些家伙不行。现在，另一个问题是正态分布。
- en: '![](img/f574eb9fdde9c7a3eae6082f0302a43e_7.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f574eb9fdde9c7a3eae6082f0302a43e_7.png)'
- en: So there the density is quite straightforward and simple， right？ I mean everybody
    has seen。 a normal distribution。 So in Germany， there used to be a bank note，
    a thin Deutsch-Mark。 bank note and that actually had the equation of the normal
    distribution on it。 This was。 the high school student's favorite for Exi-Ampre
    because of course you were allowed to bring。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 所以密度是相当简单直接的，对吧？我的意思是每个人都看过。正态分布。所以在德国，曾经有一张纸币，一张薄的德国马克纸币，实际上上面印着正态分布的方程。这是。高中生最喜欢的Exi-Ampre，因为当然你可以带上它。
- en: legal currency into class。 But okay， by now we have the euro so this is gone。
    But anyway。 so that's a normal distribution。 I guess that picture shouldn't surprise
    anybody。 Okay。 So obviously there are useful quantities that go with that。 There's
    the mean and there's。 the variance。 And the mean is mu and the variance is sigma
    squared and they're given by just。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 合法货币进入课堂。但好吧，现在我们有了欧元，所以这个已经不再适用。但无论如何。这就是正态分布。我想这个图应该不会让任何人感到惊讶。好的。所以显然有一些有用的量与此相关。比如均值和方差。均值是mu，方差是sigma平方，它们由以下给出。
- en: you know the integral dp of x times x。 And the variance is just dp of x times，
    well in。 this case x minus mu squared。 And then， well， we have this very nice
    decomposition into the。 expectation of x squared and the expectation of x squared。
    Okay。 Who has seen the derivation。 for this before？ It's about maybe 60， 70 percent。
    Okay， I'll quickly do it just as a refresher。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道，x乘以x的积分dp。方差只是dp x乘以，嗯，在这种情况下是x减去mu平方。然后，嗯，我们有一个非常好的分解成x平方的期望和x平方的期望。好的。谁以前看过这个推导？大概有60%到70%的人。好的，我会快速做一下，只是为了复习。
- en: It just goes over the linearity of expectations as game。 So the expectation
    of x minus mu is。 of course nothing else than the expectation of x squared minus
    2u x plus mu squared。 Okay。 So this is good news because we can take apart these
    three terms。 And so we have the expectation。 of x squared plus the expectation
    of x squared minus 2 mu times the expectation of x。 However， now。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是回顾了期望的线性性质作为游戏。所以x减去mu的期望是。 当然，除了x平方的期望减去2u x加上mu平方之外，别无他法。好的。所以这是个好消息，因为我们可以拆解这三项。因此，我们有x平方的期望加上x平方的期望减去2
    mu乘以x的期望。然而，现在。
- en: and this is something I can do because by linearity can pull it out of the expectation。
    Now。 fortunately these two terms then cancel out。 Right？ And so I get minus。 Okay。
    So it's。 a really straightforward decomposition。 But， okay， so why is it useful？
    So let's say you're。 observing the xi's one at a time。 And you want to get the
    mean and the variance， right？ And。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我可以做到的，因为通过线性性，我可以将其从期望中提取出来。现在。幸运的是，这两个项随后会相互抵消。对吧？所以我得到的是负号。好的。所以这是一个非常简单的分解。但，好吧，那它为什么有用呢？假设你正在一次观察xi的值。你想得到均值和方差，对吧？而且。
- en: you know， if you look at this， I mean it seems like mission impossible， right？
    Because。 I mean it's like you need to know the mean in order to get the variance。
    But given that。 I can go and compute a running average of the x squareds and a
    running average of the， x's。 And then when the time comes， I just instantiate
    this。 Okay。 That should be fairly。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道，如果你看这个，我的意思是它看起来像是不可能完成的任务，对吧？因为。我的意思是，你需要知道均值才能得到方差。但鉴于此。我可以计算x平方的滚动平均值和x的滚动平均值。然后当时机来临时，我只需实例化这个。好的。那应该是相当。
- en: '![](img/f574eb9fdde9c7a3eae6082f0302a43e_9.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f574eb9fdde9c7a3eae6082f0302a43e_9.png)'
- en: straightforward。 Good。 Now， we have this thing called a central limit theorem。
    And that's。 one of those really useful properties。 It's one of the most basic
    properties for averages。 and how they behave。 And basically suppose I have some
    random variable xi。 And I go and。 subtract from it its appropriate mean mu i。
    Then I know that the sum over those random。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 直接明了。很好。现在，我们有一个叫做中心极限定理的东西。这是一个非常有用的性质。它是关于均值和它们行为的最基本性质之一。基本上假设我有一些随机变量xi。我去做。减去它的适当均值mu
    i。然后我知道这些随机变量的总和。
- en: variables will have as aggregate variance the sum of the individual variances。
    Right？
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 变量的总方差将是各个方差的和，对吧？
- en: So that's the case because all those random variables at least， if they're independent。
    in this holds。 Right？ Otherwise it doesn't。 Now， if I go and then rescale such
    that this。 random variable has zero mean and unit variance， the zero mean comes
    from the fact that I'm。 subtracting out the means individually。 And the unit variance
    comes by from dividing through。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 因为所有这些随机变量，至少如果它们是独立的，这个条件就成立。对吧？否则就不成立。现在，如果我去重新缩放，使得这个随机变量具有零均值和单位方差，零均值来自于我逐个减去均值，而单位方差则通过除以来获得。
- en: the aggregate variance。 Then I get a random variable that has zero mean and
    unit variance。 And it can be shown that in the limit for n going to infinity under
    reasonable regularity。 conditions such as the sigma i squared not being too large。
    This will converge for Gaussian。 So this is kind of a nice theory but it's actually
    really useful in practice because that happens。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 总体方差。那么我得到一个具有零均值和单位方差的随机变量。可以证明，在合理的规律性条件下，当 n 趋于无穷大时，比如 sigma i 平方不太大，这会收敛为高斯分布。所以这是一个很好的理论，但它在实践中真的很有用，因为这会发生。
- en: fairly quickly。 So tens of random variables will already give you something
    that behaves。 pretty well behaved at least if the individual constituents look
    nice。 Okay。 So let me quickly。 give you an example of this。 And the， yeah， so
    I learned this reasoning from Grace Wabbe。 and initially it's like totally surprising。
    Suppose I have some function that's just an。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 相当快。所以，十几个随机变量就能给你一些表现得相当不错的东西，至少如果个体成分看起来不错的话。好的。让我快速给你举个例子。嗯，是的，我从Grace Wabbe那里学到了这个推理，最初它是完全令人惊讶的。假设我有一个函数，它只是一个。
- en: indicator function， right？ So it goes from maybe minus one to one。 So this is
    like some。 chi from minus one to one。 And let's assume that its value here is
    one half。 So you can。 see this is like a uniform distribution between minus one
    and one。 And if I go and fold and。 convolve this thing by itself a few times then
    very quickly so you can see if you convolve。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 指示函数，对吧？它的值可能从-1到1。所以这就像是从-1到1的卡方分布。假设它在这里的值是1/2。那么你可以看到这就像是从-1到1的均匀分布。如果我去折叠并且把这个东西和自己卷积几次，那么很快你就能看到，如果你将它和自己卷积。
- en: this by itself。 So let me call this thing here p one。 Well actually it's called
    it b， zero。 So b spline and b one of course looks like this and b two will look
    like that。 And， so on and so on。 Then you can show that this very quickly converges
    to a Gaussian。 But you'll。 have to rescale this thing according to the central
    limit theorem。 And essentially you。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我就把这个东西叫做 p1。嗯，实际上我叫它 b0。所以 b 样条和 b1 当然看起来是这样的，b2 也将是这样的，依此类推。然后你可以证明这个东西很快会收敛为高斯分布。但你必须根据中心极限定理重新缩放这个东西。基本上你。
- en: can invoke the central limit theorem to prove that in the limit of convolving
    this an infinite。 number of times with appropriate rescaling I get a Gaussian。
    So this is using central limit。 theorem to prove something in functional analysis。
    Neatrix。 Yes？ Oh。 Yeah， it's a good。 thing to cover this anyway because we will
    do convolutions and they don't just share the。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 可以调用中心极限定理来证明，通过适当的重新缩放，在将其与自身进行无穷次卷积的极限中，我会得到高斯分布。所以这是利用中心极限定理在泛函分析中证明的一个结果。Neatrix。是吗？哦。是的，还是很有必要覆盖这个内容，因为我们将会做卷积，而它们不仅仅共享。
- en: name they actually share the math。 So if I have some function f convolved with
    g then。 this is defined as the integral of f of x times g of， well， z minus x
    dx。 So I'm basically。 computing the overlap between two functions and where the
    second function has been shifted。 to either side。 It's really like a filter that
    you're applying。 So for instance if I want。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 它们实际上共享数学公式。所以，如果我有某个函数 f 和 g 的卷积，那么它被定义为 f(x) 乘以 g(，z - x) dx 的积分。所以我基本上是在计算两个函数之间的重叠，并且第二个函数已经被移位到两边。这就像是你在应用的滤波器。例如，如果我想要。
- en: to apply a low pass filter to audio I would go and convolve the audio signal
    here with。 you know something that looks suitably smooth。 So for instance one
    thing you could do is you。 could just average adjacent samplings and this will
    give you a low pass filtering。 But。 there are better ways of low pass filtering。
    Yes？ Okay， I'm not sure I'm very good at that。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要对音频应用低通滤波器，我会把音频信号和你知道的、看起来合适平滑的东西进行卷积。所以，比如你可以做的一个方法是，你可以把相邻的采样值做平均，这样就能得到一个低通滤波。但确实有更好的低通滤波方法。是吗？好的，我不确定我对此非常擅长。
- en: part but you could think of it as you know taking the overlap in this case between
    this， and itself。 right？ There is just that area here。 Or more generally you just
    have you know。 one function here that does maybe something like this。 Another
    function that does that。 And so now you're computing the pointwise product and
    integrating all the pointwise product。 Okay。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分你可以理解为是计算在这种情况下它与自身之间的重叠区域，对吧？就只是这里的那个区域。或者更一般地说，你有一个函数可能像这样做的，另一个函数像那样做的。现在你计算的是逐点的乘积并且对所有逐点乘积进行积分。好的。
- en: This is g。 But you actually have to flip g then。 So it's like a， like an inner
    product。 Yes？
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是g。但是你实际上需要翻转g。所以它就像是一个内积。对吧？
- en: Is it what？ Is it commutative？ Yes， in this case you can actually work out that，
    it will。 So there are a couple of nice properties of this。 It you know has spectrum
    preserving。 properties and so on。 So that's okay。 Take a signal processing class
    and you'll probably。 spend half the class doing convolutions at least in the basic
    one。 We will only need very。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 那么它是怎样的？它是交换的吗？是的，在这种情况下，你实际上可以推导出它是交换的。所以它有一些不错的属性，比如说它具有谱保持的特性，等等。所以没问题。上信号处理课时，你可能会花半节课的时间做卷积，至少在基础课程中是这样。我们只需要非常基础的。
- en: very basic properties of that for computer vision where we won't look at one
    dimensional。 convolutions but two dimensional convolutions and higher dimensions。
    So you basically go。 over the image and use smooth appropriately。 Okay。 Now this
    sounds like a lot of theory。 Let's actually try this out in practice。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是计算机视觉中的一些非常基本的属性，我们不会讨论一维卷积，而是二维卷积以及更高维度的卷积。所以，你基本上是遍历图像，并适当地使用平滑处理。好的，现在这听起来像是很多理论，让我们实际上尝试一下实践。
- en: '![](img/f574eb9fdde9c7a3eae6082f0302a43e_11.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f574eb9fdde9c7a3eae6082f0302a43e_11.png)'
