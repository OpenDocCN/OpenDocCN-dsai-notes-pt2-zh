- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-09-08 18:44:54'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'Domain-specific ReAct for physics-integrated iterative modeling: A case study
    of LLM agents for gas path analysis of gas turbines'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://ar5iv.labs.arxiv.org/html/2406.07572](https://ar5iv.labs.arxiv.org/html/2406.07572)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Tao Song
  prefs: []
  type: TYPE_NORMAL
- en: Department of Energy and Power Engineering
  prefs: []
  type: TYPE_NORMAL
- en: Tsinghua University
  prefs: []
  type: TYPE_NORMAL
- en: Beijing, China
  prefs: []
  type: TYPE_NORMAL
- en: songtao21@mails.tsinghua.edu.cn
  prefs: []
  type: TYPE_NORMAL
- en: '&Yuwei Fan'
  prefs: []
  type: TYPE_NORMAL
- en: Department of Energy and Power Engineering
  prefs: []
  type: TYPE_NORMAL
- en: Tsinghua University
  prefs: []
  type: TYPE_NORMAL
- en: Beijing, China
  prefs: []
  type: TYPE_NORMAL
- en: fan-yw22@mails.tsinghua.edu.cn
  prefs: []
  type: TYPE_NORMAL
- en: '&Chenlong Feng'
  prefs: []
  type: TYPE_NORMAL
- en: Department of Energy and Power Engineering
  prefs: []
  type: TYPE_NORMAL
- en: Tsinghua University
  prefs: []
  type: TYPE_NORMAL
- en: Beijing, China
  prefs: []
  type: TYPE_NORMAL
- en: fengcl23@mails.tsinghua.edu.cn
  prefs: []
  type: TYPE_NORMAL
- en: '&Keyu Song'
  prefs: []
  type: TYPE_NORMAL
- en: Department of Energy and Power Engineering
  prefs: []
  type: TYPE_NORMAL
- en: Tsinghua University
  prefs: []
  type: TYPE_NORMAL
- en: Beijing, China
  prefs: []
  type: TYPE_NORMAL
- en: sky20@mails.tsinghua.edu.cn
  prefs: []
  type: TYPE_NORMAL
- en: '&Chao Liu'
  prefs: []
  type: TYPE_NORMAL
- en: Department of Energy and Power Engineering
  prefs: []
  type: TYPE_NORMAL
- en: Tsinghua University
  prefs: []
  type: TYPE_NORMAL
- en: Beijing, China
  prefs: []
  type: TYPE_NORMAL
- en: cliu5@tsinghua.edu.cn
  prefs: []
  type: TYPE_NORMAL
- en: '&Dongxiang Jiang'
  prefs: []
  type: TYPE_NORMAL
- en: Department of Energy and Power Engineering
  prefs: []
  type: TYPE_NORMAL
- en: Tsinghua University
  prefs: []
  type: TYPE_NORMAL
- en: Beijing, China
  prefs: []
  type: TYPE_NORMAL
- en: jiangdx@tsinghua.edu.cn Corresponding author.
  prefs: []
  type: TYPE_NORMAL
- en: Abstract
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This study explores the application of large language models (LLMs) with callable
    tools in energy and power engineering domain, focusing on gas path analysis of
    gas turbines. We developed a dual-agent tool-calling process to integrate expert
    knowledge, predefined tools, and LLM reasoning. We evaluated various LLMs, including
    LLama3, Qwen1.5 and GPT. Smaller models struggled with tool usage and parameter
    extraction, while larger models demonstrated favorable capabilities. All models
    faced challenges with complex, multi-component problems. Based on the test results,
    we infer that LLMs with nearly 100 billion parameters could meet professional
    scenario requirements with fine-tuning and advanced prompt design. Continued development
    are likely to enhance their accuracy and effectiveness, paving the way for more
    robust AI-driven solutions.
  prefs: []
  type: TYPE_NORMAL
- en: '*K*eywords Large language models  $\cdot$ Gas turbine'
  prefs: []
  type: TYPE_NORMAL
- en: 1 Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Artificial intelligence (AI) has seen extensive application across various domains,
    including energy and power engineering, where it holds significant promise for
    enhancing efficiency, reliability, and sustainability. Within the field of numerical
    computation, AI techniques have been effectively utilized to partly replace conventional
    numerical methods across a wide range of energy systems, aiding in the design
    and optimization of critical processes, such as structural strength and heat transfer
    [[1](#bib.bib1), [2](#bib.bib2), [3](#bib.bib3)]. Similarly, in power equipment
    signal analysis and fault diagnosis, AI algorithms have facilitated anomaly detection
    and predictive maintenance, thereby reducing downtime and enhancing operational
    efficiency[[4](#bib.bib4), [5](#bib.bib5), [6](#bib.bib6)]. Despite these successes,
    conventional AI tools often lack the theoretical foundation necessary to comprehensively
    address the complexities of energy systems. The black-box nature of many AI models
    hinders their interpretability, raising concerns regarding their trustworthiness
    and accountability in critical energy infrastructure applications.
  prefs: []
  type: TYPE_NORMAL
- en: Recently, the advent of large language models (LLMs) like GPT[[7](#bib.bib7)],
    LLaMA[[8](#bib.bib8)], and GLM[[9](#bib.bib9)] has revolutionized artificial intelligence,
    particularly in natural language processing (NLP). These models excel in generating
    human-like text, understanding context, and performing complex tasks. Concurrently,
    enhancement methods such as retrieval-augmented generation (RAG)[[10](#bib.bib10)],
    agent with tools[[11](#bib.bib11)], and advanced prompting strategies like Chain-of-Thought[[12](#bib.bib12)]
    and Tree-of-Thoughts[[13](#bib.bib13)] have been proposed. These advancements
    address some issues of hallucinations and unexplainability in LLMs, making them
    more robust and trustworthy for practical applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this context, we explored the feasibility of integrating LLMs into a domain-specific
    application scenarios, i.e. energy and power science and engineering, by focusing
    on a classic issue in gas turbine operation and maintenance: gas path analysis.
    Our method involved crafting specific prompts and a dual-agent tool-calling process
    to guide LLMs in parsing tool parameters. We defined energy equations as tools
    for each component and employed ReAct chain thinking prompts[[14](#bib.bib14)]
    to guide LLM reasoning and solve performance parameters. Testing across different
    LLMs provided insights into their capabilities for understanding, thinking, and
    reasoning, offering valuable perspectives for further research and applications.'
  prefs: []
  type: TYPE_NORMAL
- en: 2 Background
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 2.1 Large Language Models
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Large language models (LLMs) epitomize a notable stride in artificial intelligence,
    particularly within the realm of natural language processing, hinging on neural
    networks and the transformer architecture for text processing and generation.
    Neural networks, intricate arrangements of interconnected neurons, adeptly transform
    input data through learned weights, thereby enabling multifaceted representations.
    A seminal advancement in LLMs is the integration of attention mechanisms, pivotal
    for discerning specific elements within input data, capturing extensive contextual
    dependencies. Central to LLMs, the transformer architecture comprises encoder
    and decoder layers, with the former processing input text and the latter generating
    output, leveraging self-attention mechanisms to gauge word relevance and contextual
    nuances. Beyond their fundamental architecture, LLMs offer distinct advantages
    over traditional AI methods, including their aptitude for coherent text generation
    and proficiency in reasoning tasks, bolstered by extensive training data. Techniques
    such as attention visualization enhance interpretability, shedding light on the
    model’s underlying processing mechanisms.
  prefs: []
  type: TYPE_NORMAL
- en: Recent years have witnessed a proliferation of LLM implementations, each characterized
    by unique architectural nuances, training datasets, and methodologies, engendering
    discernible disparities in their natural language comprehension and logical reasoning
    proficiencies. Our research evaluates multiple large language models from various
    organizations, elucidating their nuanced capabilities in parsing prompts and executing
    logical reasoning tasks for fundamental thermodynamics engineering problems.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 LLM agent and ReAct prompts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The outputs of large language models are probabilistic estimations of human
    language, inherently subject to error and potential inaccuracies. These models
    may exhibit hallucinatory tendencies, particularly when confronted with scenarios
    beyond their training data, posing challenges for accurate response generation.
    Complex tasks often surpass the capabilities of single-shot language responses
    from large language models. Consequently, integrating these models with memory,
    planning, and tool-based capabilities emerges as a viable strategy for addressing
    intricate problems, leveraging their strengths while mitigating inherent limitations.
  prefs: []
  type: TYPE_NORMAL
- en: Large language model agents, enriched with callable tools and guided by ReAct
    (Reasoning and Acting) strategies, constitute an advanced framework for tackling
    intricate reasoning tasks. ReAct prompts facilitate systematic problem decomposition,
    addressing common LLM issues like hallucinations and unexplainability by providing
    structured reasoning pathways. Integrated callable tools serve as domain-specific
    functions, encapsulating expert knowledge and computational methodologies. In
    our experiment, a gas turbine component solution process, aligned with thermodynamic
    principles, guides LLMs to adhere to scientific laws. By synergizing LLMs’ language
    comprehension and contextual processing prowess with human-defined tools, these
    agents achieve a balance between certainty and adaptability in problem-solving.
    This approach enhances the reliability and interpretability of LLM agents, catering
    to the nuanced demands of fields like energy and power engineering, characterized
    by complex, context-dependent challenges.
  prefs: []
  type: TYPE_NORMAL
- en: 2.3 Gas turbine components and test data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The gas turbine, operating on the Brayton cycle, converts gaseous fuel into
    mechanical energy efficiently through compression, heating, and expansion stages.
    Its components, including the compressor, combustion chamber, turbine, and nozzle,
    play vital roles in this thermodynamic process. The compressor elevates air pressure
    through adiabatic compression, crucial for overall turbine performance. In the
    combustion chamber, fuel-air mixture combustion significantly increases temperature
    and pressure, while the turbine extracts energy from the resulting gas flow to
    produce mechanical work. The nozzle accelerates exhaust gases, enhancing turbine
    efficiency.
  prefs: []
  type: TYPE_NORMAL
- en: 'Calculating compressor and turbine adiabatic efficiency involves determining
    enthalpy changes across these components under adiabatic assumptions and comparing
    actual to theoretical enthalpy changes to gauge performance. Test conditions typically
    measure temperatures, pressures, and fuel flow rates, while complexities often
    exclude parameters such as combustion chamber outlet (turbine inlet) and air/gas
    flow rates. Consequently, calculating turbine isentropic efficiency requires solving
    multiple components: determining gas flow rate through the nozzle, calculating
    turbine inlet temperature and pressure via enthalpy conservation in the combustion
    chamber, and finally computing the turbine’s isentropic efficiency. This process
    is illustrated in Figure [1](#S2.F1 "Figure 1 ‣ 2.3 Gas turbine components and
    test data ‣ 2 Background ‣ Domain-specific ReAct for physics-integrated iterative
    modeling: A case study of LLM agents for gas path analysis of gas turbines").
    This article aims to enable the large language model to comprehend and execute
    this calculation process.'
  prefs: []
  type: TYPE_NORMAL
- en: \includestandalone
  prefs: []
  type: TYPE_NORMAL
- en: '[width=0.98]gas-turb-calc'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1: Schema of gas path analysis for gas turbines'
  prefs: []
  type: TYPE_NORMAL
- en: 3 Methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 3.1 LLMs models
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Given the varying capabilities of different large language models, we selected
    models from various institutions to enable the calculation of gas turbine performance
    parameters and assess their application potential in energy and power engineering.
    The details of these models are presented in Table [1](#S3.T1 "Table 1 ‣ 3.1 LLMs
    models ‣ 3 Methods ‣ Domain-specific ReAct for physics-integrated iterative modeling:
    A case study of LLM agents for gas path analysis of gas turbines").'
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 1: LLMs used in experiment'
  prefs: []
  type: TYPE_NORMAL
- en: '| Models | Number of Params | Model Creators | Publication Date | Access Method
    | Native Tools Support | Quantization Method |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| LLama3[[8](#bib.bib8)] | 8B | Meta | April 18, 2024 | Local Deployment |
    No | FP16 |'
  prefs: []
  type: TYPE_TB
- en: '| LLama3 | 70B | Meta | April 18, 2024 | Local Deployment | No | 4Bit |'
  prefs: []
  type: TYPE_TB
- en: '| Qwen1.5[[15](#bib.bib15)] | 32B | Alibaba | February 5, 2024 | Local Deployment
    | No | 4Bit |'
  prefs: []
  type: TYPE_TB
- en: '| Qwen1.5 | 72B | Alibaba | February 5, 2024 | Local Deployment | No | 4Bit
    |'
  prefs: []
  type: TYPE_TB
- en: '| GPT3.5[[7](#bib.bib7)] | - | OpenAI | November 30, 2022 | API | Yes | - |'
  prefs: []
  type: TYPE_TB
- en: '| GPT4o | - | OpenAI | May 13, 2024 | Web | Yes | - |'
  prefs: []
  type: TYPE_TB
- en: '| GLM4[[9](#bib.bib9)] | - | ZhipuAI | January 16, 2024 | Web & API | Yes |
    - |'
  prefs: []
  type: TYPE_TB
- en: 'Due to the commercial sensitivity of data in the energy and power engineering
    industry, we focused on testing multiple large language models that can be locally
    executed on consumer-grade graphics cards. The models listed in Table [1](#S3.T1
    "Table 1 ‣ 3.1 LLMs models ‣ 3 Methods ‣ Domain-specific ReAct for physics-integrated
    iterative modeling: A case study of LLM agents for gas path analysis of gas turbines")
    were deployed on a platform equipped with two NVIDIA RTX 4090 GPUs (totaling 48
    GB of video memory), with quantization applied to meet the memory constraints.
    Additionally, we tested the process described in this article using business models
    accessed through APIs to facilitate a comparative analysis of the results.'
  prefs: []
  type: TYPE_NORMAL
- en: 3.2 Dual-agent tool-calling process
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Given that the aforementioned large language models do not all natively support
    tool calling, this article employs a general dual-agent tool-calling process to
    construct a unified large language model agent. As illustrated in Figure [2](#S3.F2
    "Figure 2 ‣ 3.2 Dual-agent tool-calling process ‣ 3 Methods ‣ Domain-specific
    ReAct for physics-integrated iterative modeling: A case study of LLM agents for
    gas path analysis of gas turbines"), the first agent, prompted by the ReAct framework,
    outputs "Thought, Action, Action input" logically, enabling it to select and plan
    subsequent actions. When tool usage is required, the Action and Action input content
    generated by the first agent are submitted to the second agent. The second agent
    is tasked with qualifying the tool and extracting specific information in JSON
    format. This JSON information is then parsed into Python variables, and the preset
    tool code is executed to complete the calculation. The result from the second
    tool is returned as an "Observation" content to the first agent, which continues
    the "Thought, Action, Action input" process until it outputs the "Thought, Final
    Answer". Additionally, the first agent’s prompt includes several sentences on
    the fundamentals of gas turbines. The prompt words for both agents are provided
    in the appendix [A.1](#A1.SS1 "A.1 Prompts for LLMs ‣ Appendix A Appendix ‣ Domain-specific
    ReAct for physics-integrated iterative modeling: A case study of LLM agents for
    gas path analysis of gas turbines") at the end of this article.'
  prefs: []
  type: TYPE_NORMAL
- en: \includestandalone
  prefs: []
  type: TYPE_NORMAL
- en: '[width=0.98]dual-agent-process'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2: Dual-agent tool-calling process'
  prefs: []
  type: TYPE_NORMAL
- en: 3.3 Gas path analysis solver tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To ensure the outputs generated by the LLMs adhere to the fundamental laws
    of thermodynamics and to assist the agents in calculating the isentropic efficiency
    of the gas turbine compressor and turbine, we have predefined parameters and developed
    four tools for the gas turbine’s compressor, combustion chamber, turbine, and
    nozzle. These tools operate according to the following principles:'
  prefs: []
  type: TYPE_NORMAL
- en: •
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compressor
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '|  | $\eta_{\text{comp}}=\frac{\Delta H_{\text{ideal}}}{\Delta H_{\text{real}}}\approx\frac{\left(\frac{P_{\text{out}}}{P_{\text{in}}}\right)^{\frac{\gamma-1}{\gamma}}-1}{\frac{T_{\text{out}}}{T_{\text{in}}}-1}$
    |  |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: •
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combustion Chamber
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '|  | $1$2 |  |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: •
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Turbine
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '|  | $\eta_{\text{turb}}=\frac{\Delta H_{\text{real}}}{\Delta H_{\text{ideal}}}\approx\frac{1-\frac{T_{\text{out}}}{T_{\text{in}}}}{1-\left(\frac{P_{\text{out}}}{P_{\text{in}}}\right)^{\frac{\gamma-1}{\gamma}}}$
    |  |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: •
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nozzle
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '|  | $1$2 |  |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: 'To streamline the calculation process, various approximations were made, particularly
    concerning gas thermophysical properties and flow conservation. Since the internal
    calculations of these tools are not visible to the large language model, these
    simplifications do not impact the experimental evaluation of the model’s agent
    capabilities. In practical engineering applications, these tools can be substituted
    with any calculation process necessary to meet modeling accuracy requirements.
    The functions defining these four calculation tools are detailed in the appendix
    [A.2](#A1.SS2 "A.2 Tools for gas turbine components ‣ Appendix A Appendix ‣ Domain-specific
    ReAct for physics-integrated iterative modeling: A case study of LLM agents for
    gas path analysis of gas turbines") at the end of this article.'
  prefs: []
  type: TYPE_NORMAL
- en: 4 Results and discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the initial phase, we evaluated the performance of LLMs in calculating single
    component without embedded tools. Detailed questions, can be found in the appendix
    [A.3](#A1.SS3 "A.3 Test questions for LLM agents ‣ Appendix A Appendix ‣ Domain-specific
    ReAct for physics-integrated iterative modeling: A case study of LLM agents for
    gas path analysis of gas turbines"), were posed to the models. The results, summarized
    in Table [2](#S4.T2 "Table 2 ‣ 4 Results and discussion ‣ Domain-specific ReAct
    for physics-integrated iterative modeling: A case study of LLM agents for gas
    path analysis of gas turbines"), revealed that locally deployed models (LLama3
    and Qwen1.5) could only engage in text-based reasoning and preliminary calculations,
    resulting in incorrect outcomes. This highlights their limitation in performing
    accurate technical calculations through text alone. Conversely, web-accessed models
    (ChatGPT4o and ChatGLM4) demonstrated better performance. They engaged in conceptual
    reasoning, made reasonable assumptions (e.g., ideal gas properties, fuel calorific
    value, etc.), and generated and executed Python code. ChatGPT4o accurately calculated
    all gas turbine components, while ChatGLM4 correctly calculated the combustion
    chamber and turbine but erred with the nozzle and compressor.'
  prefs: []
  type: TYPE_NORMAL
- en: These results indicate that while LLMs have a foundational understanding of
    gas turbine concepts, their reasoning and calculation accuracy varies. Web-accessed
    models, which support Python script execution, can handle complex tasks better
    than locally deployed models, which are limited to text-based reasoning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 2: Reasoning and calculation results of single components by native LLMs'
  prefs: []
  type: TYPE_NORMAL
- en: '| Models | Access Met. | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| LLama3-8B | Local Depl. | Incorrect reasoning & calculation through formulas
    expressed in textual language |'
  prefs: []
  type: TYPE_TB
- en: '| LLama3-70B | Local Depl. | Incorrect reasoning & calculation through formulas
    expressed in textual language |'
  prefs: []
  type: TYPE_TB
- en: '| Qwen1.5-32B | Local Depl. | Incorrect reasoning & calculation through formulas
    expressed in textual language |'
  prefs: []
  type: TYPE_TB
- en: '| Qwen1.5-72B | Local Depl. | Incorrect reasoning & calculation through formulas
    expressed in textual language |'
  prefs: []
  type: TYPE_TB
- en: '| GPT4o | Web | All correct calculation through reasoning, generation & execution
    of Python code |'
  prefs: []
  type: TYPE_TB
- en: '| GLM4 | Web | Partially incorrect calculation through reasoning, generation
    & execution of Python code |'
  prefs: []
  type: TYPE_TB
- en: 'Most LLMs lack sufficient native knowledge of gas turbine components and cannot
    perform reasoning and calculations independently. To address this, we built a
    dual-agent system with predefined gas turbine calculation tools. After construction,
    we tested single-component calculation questions, summarized in Table [3](#S4.T3
    "Table 3 ‣ 4 Results and discussion ‣ Domain-specific ReAct for physics-integrated
    iterative modeling: A case study of LLM agents for gas path analysis of gas turbines").
    For the small model LLama3-8B, agent1 correctly generated "Thought, Action, Action
    input" response, but agent2 incorrectly produced tool call results in JSON when
    more than three tools were available. The Qwen1.5 models’ agent1 functioned normally,
    but agent2’s JSON strings had subtle errors, like added spaces in parameter names.
    Conversely, LLama3-70B, GPT3.5 and GLM4 accurately completed tool calls for all
    four components and generated user-friendly replies, demonstrating its superior
    capabilities. Detailed responses from some agents are provided in the appendix
    [A.4](#A1.SS4 "A.4 Response of LLM agents ‣ Appendix A Appendix ‣ Domain-specific
    ReAct for physics-integrated iterative modeling: A case study of LLM agents for
    gas path analysis of gas turbines").'
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 3: Reasoning and calculation results of single components by LLM agent
    embedded with tools'
  prefs: []
  type: TYPE_NORMAL
- en: '| Models | Access Met. | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| LLama3-8B | Local Depl. | Correct Action info from agent1, incorrect tool
    call JSON from agent2 |'
  prefs: []
  type: TYPE_TB
- en: '| LLama3-70B | Local Depl. | Correct results from both agents |'
  prefs: []
  type: TYPE_TB
- en: '| Qwen1.5-32B | Local Depl. | Correct Action info from agent1, incorrect tool
    call JSON from agent2 |'
  prefs: []
  type: TYPE_TB
- en: '| Qwen1.5-72B | Local Depl. | Correct Action info from agent1, incorrect tool
    call JSON from agent2 |'
  prefs: []
  type: TYPE_TB
- en: '| GPT3.5 | API | Correct results from both agents |'
  prefs: []
  type: TYPE_TB
- en: '| GLM4 | API | Correct results from both agents |'
  prefs: []
  type: TYPE_TB
- en: 'After integrating multi-component calculation tools, the three LLM agents could
    reason and make tool call decisions based on user queries. We tested them on a
    more complex task: calculating the adiabatic efficiency of both the gas turbine’s
    compressor and turbine using typical test data. Detailed questions are provided
    in the appendix [A.3](#A1.SS3 "A.3 Test questions for LLM agents ‣ Appendix A
    Appendix ‣ Domain-specific ReAct for physics-integrated iterative modeling: A
    case study of LLM agents for gas path analysis of gas turbines"). To solve this,
    the LLM agent needed to sequentially call the tools according to the logic in
    Figure [1](#S2.F1 "Figure 1 ‣ 2.3 Gas turbine components and test data ‣ 2 Background
    ‣ Domain-specific ReAct for physics-integrated iterative modeling: A case study
    of LLM agents for gas path analysis of gas turbines"), selecting correct parameters
    from the input and output data. Initially, all three agents correctly used the
    measured inlet and outlet data of the compressor. However, they incorrectly used
    unmeasured turbine inlet temperature and pressure parameters, leading to wrong
    turbine efficiency results. This indicates the LLMs struggled with complex reasoning
    chains and lacked a deep understanding of gas turbine specifics. With hints provided
    for solving sequence, GLM4 and GPT3.5 adjusted their order correctly but still
    selected incorrect tool parameters for the nozzle, resulting in errors. In contrast,
    LLama3-70B correctly executed the entire chain solution. Responses from LLM agents
    are included in the appendix [A.4](#A1.SS4 "A.4 Response of LLM agents ‣ Appendix
    A Appendix ‣ Domain-specific ReAct for physics-integrated iterative modeling:
    A case study of LLM agents for gas path analysis of gas turbines").'
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 4: Chain calculation results of multiple components by LLM agent with
    hints'
  prefs: []
  type: TYPE_NORMAL
- en: '| Models | Access Met. | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| LLama3-70B | Local Depl. | Correctly executed the entire chain solution |'
  prefs: []
  type: TYPE_TB
- en: '| GPT3.5 | API | Incorrectly selected parameters for calculating the nozzle
    |'
  prefs: []
  type: TYPE_TB
- en: '| GLM4 | API | Incorrectly selected parameters for calculating the nozzle |'
  prefs: []
  type: TYPE_TB
- en: The above results show that different LLMs exhibit varying capabilities. The
    state-of-the-art GPT4o model can independently generate and execute correct Python
    scripts for simple thermodynamic problems, such as gas turbine component calculations,
    highlighting the potential of tool-embedded LLM agents for scientific and engineering
    applications. Our dual-agent tool-calling process enables tool use across various
    LLMs, regardless of native support, reducing illusion phenomena and integrating
    human knowledge and complex models. However, LLMs vary in tool selection and parameter
    extraction accuracy. Generally, larger, more recent models perform better. Despite
    advancements, current LLMs struggle with complex, multi-component gas turbine
    problems. With human knowledge planning, LLMs may eventually handle these challenges
    successfully.
  prefs: []
  type: TYPE_NORMAL
- en: 5 Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our study investigated the application of large language models (LLMs) with
    callable tools in the specialized domain of energy and power engineering, focusing
    specifically on gas turbine gas path analysis. We implemented a dual-agent tool-calling
    process designed to enhance LLM capabilities by integrating human knowledge, predefined
    tools, and LLM reasoning. This process was tested on several mainstream LLMs,
    including LLama3, Qwen1.5, and GPT, to evaluate their proficiency in tool parameter
    extraction, knowledge understanding, and reasoning. Smaller and older models such
    as LLama3-8B and Qwen1.5 exhibited limitations in effectively utilizing tools
    and extracting parameters, underscoring their struggles with complex, multi-component
    problems. In contrast, more advanced models like GPT4o and LLama3-70B demonstrated
    superior capabilities, showing promise in handling intricate engineering tasks.
    Despite these advancements, current LLMs still face challenges with highly complex,
    multi-component problems. However, LLM agents with tool calling ability, combined
    with human expertise, show significant potential for improving LLM performance
    in these intricate tasks. Continued development, fine-tuning, and advanced prompt
    engineering are likely to enhance their accuracy and effectiveness, enabling more
    sophisticated problem-solving in specialized domains.
  prefs: []
  type: TYPE_NORMAL
- en: Based on the test results of these models, we can reasonably anticipate that
    with fine-tuning using professional knowledge and advanced prompting design, LLMs
    with nearly 100 billion parameters could meet the reasoning requirements of professional
    scenarios. Our findings lay the groundwork for future research and development
    in the application of LLMs in specialized engineering fields, paving the way for
    more robust and capable AI-driven solutions.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[1] Xiaoqian Chen, Xianqi Chen, Weien Zhou, Jun Zhang, and Wen Yao. The heat
    source layout optimization using deep learning surrogate modeling. Structural
    and Multidisciplinary Optimization, 62(6):3127–3148, December 2020.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2] Esther Andrés-Pérez and Carlos Paulete-Periáñez. On the application of
    surrogate regression models for aerodynamic coefficient prediction. Complex &
    Intelligent Systems, 7(4):1991–2021, August 2021.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3] Yuwei Fan, Tengbo Guo, Zhe Li, Liangyou Hong, Chao Liu, and Dongxiang Jiang.
    Structural Dynamic Load Prediction Method Based on Long Short-term Memory Network.
    Chinese Journal of Ship Research, 2023.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4] Yunfeng Jin, Chao Liu, Xin Tian, Haizhou Huang, Gaofeng Deng, Yunlong Guan,
    and Dongxiang Jiang. A hybrid model of LSTM neural networks with a thermodynamic
    model for condition-based maintenance of compressor fouling. Measurement Science
    and Technology, 32(12):124007, September 2021.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5] Tao Song, Chao Liu, Rui Wu, Yunfeng Jin, and Dongxiang Jiang. A hierarchical
    scheme for remaining useful life prediction with long short-term memory networks.
    Neurocomputing, 487:22–33, May 2022.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6] Yunfeng Jin, Chao Liu, Xin Tian, Haizhou Huang, Gaofeng Deng, Yunlong Guan,
    and Dongxiang Jiang. A novel integrated modeling approach for filter diagnosis
    in gas turbine air intake system. Proceedings of the Institution of Mechanical
    Engineers, Part A: Journal of Power and Energy, 236(3):435–449, May 2022.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7] Tom B. Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared Kaplan,
    Prafulla Dhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell,
    Sandhini Agarwal, Ariel Herbert-Voss, Gretchen Krueger, Tom Henighan, Rewon Child,
    Aditya Ramesh, Daniel M. Ziegler, Jeffrey Wu, Clemens Winter, Christopher Hesse,
    Mark Chen, Eric Sigler, Mateusz Litwin, Scott Gray, Benjamin Chess, Jack Clark,
    Christopher Berner, Sam McCandlish, Alec Radford, Ilya Sutskever, and Dario Amodei.
    Language Models are Few-Shot Learners, July 2020, arXiv preprint arXiv:2005.14165.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[8] Hugo Touvron, Thibaut Lavril, Gautier Izacard, Xavier Martinet, Marie-Anne
    Lachaux, Timothée Lacroix, Baptiste Rozière, Naman Goyal, Eric Hambro, Faisal
    Azhar, Aurelien Rodriguez, Armand Joulin, Edouard Grave, and Guillaume Lample.
    LLaMA: Open and Efficient Foundation Language Models, February 2023, arXiv preprint
    arXiv:2302.13971.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[9] Zhengxiao Du, Yujie Qian, Xiao Liu, Ming Ding, Jiezhong Qiu, Zhilin Yang,
    and Jie Tang. GLM: General Language Model Pretraining with Autoregressive Blank
    Infilling, March 2022, arXiv preprint arXiv:2103.10360.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[10] Patrick Lewis, Ethan Perez, Aleksandra Piktus, Fabio Petroni, Vladimir
    Karpukhin, Naman Goyal, Heinrich Küttler, Mike Lewis, Wen-tau Yih, Tim Rocktäschel,
    Sebastian Riedel, and Douwe Kiela. Retrieval-Augmented Generation for Knowledge-Intensive
    NLP Tasks, April 2021, arXiv preprint arXiv:2005.11401.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[11] Bhargavi Paranjape, Scott Lundberg, Sameer Singh, Hannaneh Hajishirzi,
    Luke Zettlemoyer, and Marco Tulio Ribeiro. ART: Automatic multi-step reasoning
    and tool-use for large language models, March 2023, arXiv preprint arXiv:2303.09014.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[12] Jason Wei, Xuezhi Wang, Dale Schuurmans, Maarten Bosma, Brian Ichter,
    Fei Xia, Ed Chi, Quoc Le, and Denny Zhou. Chain-of-Thought Prompting Elicits Reasoning
    in Large Language Models, January 2023, arXiv preprint arXiv:2201.11903.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[13] Shunyu Yao, Dian Yu, Jeffrey Zhao, Izhak Shafran, Thomas L. Griffiths,
    Yuan Cao, and Karthik Narasimhan. Tree of Thoughts: Deliberate Problem Solving
    with Large Language Models, December 2023, arXiv preprint arXiv:2305.10601.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[14] Shunyu Yao, Jeffrey Zhao, Dian Yu, Nan Du, Izhak Shafran, Karthik Narasimhan,
    and Yuan Cao. ReAct: Synergizing Reasoning and Acting in Language Models, March
    2023, arXiv preprint arXiv:2210.03629.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[15] Jinze Bai, Shuai Bai, Yunfei Chu, Zeyu Cui, Kai Dang, Xiaodong Deng, Yang
    Fan, Wenbin Ge, Yu Han, Fei Huang, Binyuan Hui, Luo Ji, Mei Li, Junyang Lin, Runji
    Lin, Dayiheng Liu, Gao Liu, Chengqiang Lu, Keming Lu, Jianxin Ma, Rui Men, Xingzhang
    Ren, Xuancheng Ren, Chuanqi Tan, Sinan Tan, Jianhong Tu, Peng Wang, Shijie Wang,
    Wei Wang, Shengguang Wu, Benfeng Xu, Jin Xu, An Yang, Hao Yang, Jian Yang, Shusheng
    Yang, Yang Yao, Bowen Yu, Hongyi Yuan, Zheng Yuan, Jianwei Zhang, Xingxuan Zhang,
    Yichang Zhang, Zhenru Zhang, Chang Zhou, Jingren Zhou, Xiaohuan Zhou, and Tianhang
    Zhu. Qwen Technical Report, September 2023, arXiv preprint arXiv:2309.16609.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Appendix A Appendix
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A.1 Prompts for LLMs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'System prompt for agent1 under ReAct strategy:'
  prefs: []
  type: TYPE_NORMAL
- en: '1You  are  a  helpful  assistant  like  a  pirate.2Perform  the  task  to  the  best  of  your  ability.3You  is  here  to  assist.4TOOLS:5------6You  has  access  to  the  following  tools:7calc_compressor_eff(inlet_T:  float,  inlet_P:  float,  outlet_T:  float,  outlet_P:  float)  ->  dict  -  Calculate  the  isentropic  efficiency  of  a  COMPRESSOR  by  inputting  inlet  temperature  and  pressure,  outlet  temperature  and  pressure8calc_turbine_eff(inlet_T:  float,  inlet_P:  float,  outlet_T:  float,  outlet_P:  float)  ->  dict  -  Calculate  the  isentropic  efficiency  of  a  TURBINE  by  inputting  inlet  temperature  and  pressure,  outlet  temperature  and  pressure9calc_nozzle(inlet_T:  float,  inlet_P:  float,  outlet_P:  float,  throat_area:  float)  ->  dict  -  Calculate  NOZZLE  condition  like  the  mass  flow  rate  wether  choked  or  not,  by  inputting  the  inlet  temperature,  inlet  pressure,  outlet  pressure,  and  throat  area10calc_burner_outlet(inlet_T:  float,  inlet_P:  float,  W_fuel:  float,  W_air:  float)  ->  dict  -  Calculate  the  outlet  temperature  and  pressure  of  a  combustion  chamber  (BURNER)  by  inputting  the  inlet  temperature,  inlet  pressure,  fuel  flow  rate,  and  air  flow  rate11To  use  a  tool,  please  use  the  following  format:12‘‘‘13Thought:  Do  I  need  to  use  a  tool?  Yes14Action:  the  action  to  take,  should  be  one  of  [calc_compressor_eff,  calc_turbine_eff,  calc_nozzle,  calc_burner_outlet]15Action  Input:  the  input  to  the  action16Observation:  the  result  of  the  action17‘‘‘18When  you  have  a  response  to  say  to  the  Human,  or  if  you  do  not  need  to  use  a  tool,  you  MUST  use  the  format:19‘‘‘20Thought:  Do  I  need  to  use  a  tool?  No21Final  Answer:  [your  response  here]22‘‘‘23You  always  MUST  use  the  format:24‘‘‘25Thought:  you  should  always  think  about  what  to  do26Action:  the  action  to  take,  should  be  one  of  [calc_compressor_eff,  calc_turbine_eff,  calc_nozzle,  calc_burner_outlet]27Action  Input:  the  input  to  the  action28Observation:  the  result  of  the  action29...  (this  Thought/Action/Action  Input/Observation  can  repeat  N  times)30Thought:  I  now  know  the  final  answer31Final  Answer:  the  final  answer  to  the  original  input  question32‘‘‘3334You  are  familiar  with  the  basic  structure  of  a  gas  turbine,  comprising  a  compressor,  combustion  chamber(burner),  turbine,  and  nozzle.35The  components  are  connected  in  sequence,  thus  satisfying  these  relationships:36*  inlet-to-outlet  correspondence:  compressor  outlet  =  burner  inlet;  burner  outlet  =  turbine  inlet;  turbine  outlet  =  nozzle  inlet37*  equality  of  flow  rates  across  components:  W_comp  =  W_burner  =  W_turbine  =  W_nozzle  =  W_air3839When  asked  for  a  single  component  information,  you  can  call  the  corresponding  tool  and  answer  directly4041Please  assist  in  implementing  these  calculations  to  analyze  the  performance  of  a  gas  turbine.424344Your  answer  must  always  contain  points:45(Thought,  Final  Answer)  or  (Thought,  Action,  Action  Input)46Your  answer  can‘t  contain  both  points  ’Final  Answer’  and  ’Action’4748You  should  use  ONE  tool  at  a  time,  think  STEP  BY  STEP49Begin!'
  prefs: []
  type: TYPE_NORMAL
- en: 'System prompt for agent2:'
  prefs: []
  type: TYPE_NORMAL
- en: '1You  have  access  to  the  following  tools:23[4  {5  "name":  "calc_compressor_eff",6  "description":  "calc_compressor_eff(inlet_T:  float,  inlet_P:  float,  outlet_T:  float,  outlet_P:  float)  ->  dict  -  Calculate  the  isentropic  efficiency  of  a  COMPRESSOR  by  inputting  inlet  temperature  and  pressure,  outlet  temperature  and  pressure",7  "parameters":  {8  "type":  "object",9  "properties":  {10  "inlet_T":  {11  "type":  "number"12  },13  "inlet_P":  {14  "type":  "number"15  },16  "outlet_T":  {17  "type":  "number"18  },19  "outlet_P":  {20  "type":  "number"21  }22  },23  "required":  [24  "inlet_T",25  "inlet_P",26  "outlet_T",27  "outlet_P"28  ]29  }30  },31  {32  "name":  "calc_turbine_eff",33  "description":  "calc_turbine_eff(inlet_T:  float,  inlet_P:  float,  outlet_T:  float,  outlet_P:  float)  ->  dict  -  Calculate  the  isentropic  efficiency  of  a  TURBINE  by  inputting  inlet  temperature  and  pressure,  outlet  temperature  and  pressure",34  "parameters":  {35  "type":  "object",36  "properties":  {37  "inlet_T":  {38  "type":  "number"39  },40  "inlet_P":  {41  "type":  "number"42  },43  "outlet_T":  {44  "type":  "number"45  },46  "outlet_P":  {47  "type":  "number"48  }49  },50  "required":  [51  "inlet_T",52  "inlet_P",53  "outlet_T",54  "outlet_P"55  ]56  }57  },58  {59  "name":  "calc_nozzle",60  "description":  "calc_nozzle(inlet_T:  float,  inlet_P:  float,  outlet_P:  float,  throat_area:  float)  ->  dict  -  Calculate  NOZZLE  condition  like  the  mass  flow  rate  wether  choked  or  not,  by  inputting  the  inlet  temperature,  inlet  pressure,  outlet  pressure,  and  throat  area",61  "parameters":  {62  "type":  "object",63  "properties":  {64  "inlet_T":  {65  "type":  "number"66  },67  "inlet_P":  {68  "type":  "number"69  },70  "outlet_P":  {71  "type":  "number"72  },73  "throat_area":  {74  "type":  "number"75  }76  },77  "required":  [78  "inlet_T",79  "inlet_P",80  "outlet_P",81  "throat_area"82  ]83  }84  },85  {86  "name":  "calc_burner_outlet",87  "description":  "calc_burner_outlet(inlet_T:  float,  inlet_P:  float,  W_fuel:  float,  W_air:  float)  ->  dict  -  Calculate  the  outlet  temperature  and  pressure  of  a  combustion  chamber  (BURNER)  by  inputting  the  inlet  temperature,  inlet  pressure,  fuel  flow  rate,  and  air  flow  rate",88  "parameters":  {89  "type":  "object",90  "properties":  {91  "inlet_T":  {92  "type":  "number"93  },94  "inlet_P":  {95  "type":  "number"96  },97  "W_fuel":  {98  "type":  "number"99  },100  "W_air":  {101  "type":  "number"102  }103  },104  "required":  [105  "inlet_T",106  "inlet_P",107  "W_fuel",108  "W_air"109  ]110  }111  }112]113114You  must  always  select  one  of  the  above  tools  and  respond  with  only  a  JSON  object  matching  the  following  schema:115116{117  "tool":  <name  of  the  selected  tool>,118  "tool_input":  <parameters  for  the  selected  tool,  matching  the  tool’s  JSON  schema>119}'
  prefs: []
  type: TYPE_NORMAL
- en: A.2 Tools for gas turbine components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '1from  langchain_core.tools  import  tool23gamma,  R  =  1.4,  287.05287445@tool6def  calc_compressor_eff(inlet_T  :  float,  inlet_P  :  float,  outlet_T  :  float,  outlet_P  :  float)  ->  dict:7  """Calculate  the  isentropic  efficiency  of  a  COMPRESSOR  by  inputting  inlet  temperature  and  pressure,  outlet  temperature  and  pressure"""8  return  {"comp_isentropic_eff":  ((outlet_P  /  inlet_P)  **  ((gamma  -  1)  /  gamma)  -  1)  /  (outlet_T  /  inlet_T  -  1  )}910@tool11def  calc_turbine_eff(inlet_T  :  float,  inlet_P  :  float,  outlet_T  :  float,  outlet_P  :  float)  ->  dict:12  """Calculate  the  isentropic  efficiency  of  a  TURBINE  by  inputting  inlet  temperature  and  pressure,  outlet  temperature  and  pressure"""13  return  {"turb_isentropic_eff":  (1  -  outlet_T  /  inlet_T)  /  (1  -  (outlet_P  /  inlet_P)  **  ((gamma  -  1)  /  gamma))}1415@tool16def  calc_nozzle(inlet_T  :  float,  inlet_P  :  float,  outlet_P  :  float,  throat_area  :  float)  ->  dict:17  """Calculate  NOZZLE  condition  like  the  mass  flow  rate  wether  choked  or  not,  by  inputting  the  inlet  temperature,  inlet  pressure,  outlet  pressure,  and  throat  area"""18  nozz_pr  =  inlet_P  /  outlet_P19  nozz_mach  =  ((nozz_pr  **  ((gamma  -  1)  /  gamma)  -  1)  *  (2  /  (gamma  -  1)))  **  0.520  nozz_outlet_mach  =  min(nozz_mach,  1)21  nozz_w  =  inlet_P  *  throat_area  /  inlet_T**0.5  *  gamma**0.5  *  nozz_outlet_mach  *  (1+(gamma-1)/2*nozz_outlet_mach**2)**(-(gamma+1)/(2*gamma-2))  /  R**0.522  return  {"W_nozz":  nozz_w,  "chocked":  "yes"  if  nozz_mach  >  1  else  "no"}2324@tool25def  calc_burner_outlet(inlet_T  :  float,  inlet_P  :  float,  W_fuel  :  float,  W_air  :  float)  ->  dict:26  """Calculate  the  outlet  temperature  and  pressure  of  a  combustion  chamber  (BURNER)  by  inputting  the  inlet  temperature,  inlet  pressure,  fuel  flow  rate,  and  air  flow  rate"""27  outlet_T  =  inlet_T  +  (48.6e6  /  1005)  *  W_fuel  /  W_air28  return  {29  "burner_outlet_T":  outlet_T,30  "burner_outlet_P":  inlet_P  *  0.9531  }'
  prefs: []
  type: TYPE_NORMAL
- en: A.3 Test questions for LLM agents
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Questions of a single component can be solved with a single tool call Question
    1 Please help me calculate the compressor efficiency with the following inlet
    conditions: temperature and pressure of 300K and 101325Pa, respectively; and outlet
    conditions: temperature and pressure of 420K and 201325Pa, respectively. Question
    2 Please assist me in calculating the efficiency of the turbine at the following
    inlet conditions: temperature and pressure of 1300K and 1601325Pa, respectively;
    and outlet conditions: temperature and pressure of 820K and 201325Pa, respectively.
    Question 3 Please help me determine the nozzle flow rate and whether there is
    any blockage with the following conditions: inlet temperature and pressure of
    420K and 201325Pa, respectively; outlet pressure of 101325Pa; and nozzle cross-sectional
    area of 0.25 m2. Question 4 Please calculate the outlet conditions of the combustion
    chamber for me with the following inlet conditions: temperature and pressure of
    1300K and 801325Pa, respectively; air flow rate of 85 kg/s; and fuel flow rate
    of 1.4 kg/s. Question 5 Please help me calculate the flow rate through a nozzle
    with a minimum area of 0.3 m2, at atmospheric pressure of 101325Pa, and with inlet
    conditions of 420K and an inlet pressure of 400kPa.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Questions that require chain thinking and continuous use of tools to solve
    Question 6 I tested a gas turbine with the following data: Atmospheric temperature
    is 300K, pressure is 101325Pa. Compressor outlet / burner inlet temperature is
    700K, pressure is 1800kPa, fuel flow rate of 1.5 kg/s. Nozzle inlet temperature
    of 620 K, pressure of 301325Pa, nozzle area is 4.24 m2\. Please help me calculate
    the adiabatic efficiency of the compressor and the turbine. Question 7 I tested
    a gas turbine with the following data: Atmospheric temperature is 300K, pressure
    is 101325Pa. Compressor outlet / burner inlet temperature is 700K, pressure is
    1800kPa, fuel flow rate of 1.5 kg/s. Nozzle inlet temperature of 620 K, pressure
    of 301325Pa, nozzle area is 4.24 m2\. Please help me calculate the adiabatic efficiency
    of the compressor and the turbine. You should calculate nozzle first for air mass
    flow, and then calculate burner for turbine inlet. Then calculate the turbine
    efficiency.'
  prefs: []
  type: TYPE_NORMAL
- en: A.4 Response of LLM agents
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Correct answers to questions 1 from the LLM agent built by llama3-70B Agent1
    System System prompt for agent1 Human Please help me calculate the compressor
    efficiency with the following inlet conditions: temperature and pressure of 300K
    and 101325Pa, respectively; and outlet conditions: temperature and pressure of
    420K and 201325Pa, respectively. AI scratchpad: LLM Thought: Do I need to use
    a tool? Yes. Action: calc_compressror_eff. Action Input: inlet_T = 300, inlet_P
    = 101325, outlet_T = 420, outlet_P = 201325. Agent2 System System prompt for agent2
    Human Action: calc_compressror_eff. Action Input: inlet_T = 300, inlet_P = 101325,
    outlet_T = 420, outlet_P = 201325. LLM { "tool": "calc_compressor_eff", "tool_input":
    { "inlet_T": 300, "inlet_P": 101325, "outlet_T": 420, "outlet_P": 201325 }} Function
    {"comp_isentropic_eff": 0.5418276784464716} Agent1 System System prompt for agent1
    Human Please help me calculate the compressor efficiency with the following inlet
    conditions: temperature and pressure of 300K and 101325Pa, respectively; and outlet
    conditions: temperature and pressure of 420K and 201325Pa, respectively. AI scratchpad:
    Thought: Do I need to use a tool? Yes. Action: calc_compressror_eff. Action Input:
    inlet_T = 300, inlet_P = 101325, outlet_T = 420, outlet_P = 201325\. Observation:
    {"comp_isentropic_eff": 0.5418276784464716}. LLM Thought: I now know the final
    answer. Final Answer: The isentropic efficiency of the compressor is approximately
    54.18%.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Incorrect answers to questions 2 from the LLM agent built by llama3-8B Agent1
    System System prompt for agent1 Human Please assist me in calculating the efficiency
    of the turbine at the following inlet conditions: temperature and pressure of
    1300K and 1601325Pa, respectively; and outlet conditions: temperature and pressure
    of 820K and 201325Pa, respectively. AI scratchpad: LLM Thought: Do I need to use
    a tool? Yes. Action: calc_turbine_eff. Action Input: inlet_T = 1300, inlet_P =
    1601325, outlet_T = 820, outlet_P = 201325. Agent2 System System prompt for agent2
    Human Action: calc_turbine_eff. Action Input: inlet_T = 1300, inlet_P = 1601325,
    outlet_T = 820, outlet_P = 201325. LLM { "turbine_eff": 0.824312 } Function Error'
  prefs: []
  type: TYPE_NORMAL
- en: 'Incorrect answers to questions 2 from the LLM agent built by Qwen1.5-72B Agent1
    System System prompt for agent1 Human Please assist me in calculating the efficiency
    of the turbine at the following inlet conditions: temperature and pressure of
    1300K and 1601325Pa, respectively; and outlet conditions: temperature and pressure
    of 820K and 201325Pa, respectively. AI scratchpad: LLM Thought: Do I need to use
    a tool? Yes. Action: calc_turbine_eff. Action Input: inlet_T = 1300, inlet_P =
    1601325, outlet_T = 820, outlet_P = 201325. Agent2 System System prompt for agent2
    Human Action: calc_turbine_eff. Action Input: inlet_T = 1300, inlet_P = 1601325,
    outlet_T = 820, outlet_P = 201325. LLM { "tool": "calc_turbine_eff", "tool_input":
    { "inlet_ T": 1300, "inlet_ P": 1601325, "outlet_ T": 820, "outlet_ P": 201325
    }} Function Error'
  prefs: []
  type: TYPE_NORMAL
- en: 'Correct answers to questions 2 from the LLM agent built by llama3-70B (Outputs
    of agent2 and function calls are omitted) Agent1 System System prompt for agent1
    Human Please assist me in calculating the efficiency of the turbine at the following
    inlet conditions: temperature and pressure of 1300K and 1601325Pa, respectively;
    and outlet conditions: temperature and pressure of 820K and 201325Pa, respectively.
    AI scratchpad: LLM Thought: Do I need to use a tool? Yes. Action: calc_turbine_eff.
    Action Input: inlet_T = 1300, inlet_P = 1601325, outlet_T = 820, outlet_P = 201325.
    ... ... Human ... Observation: {"turb_isentropic_eff": 0.8259391320308387}. LLM
    Thought: I now know the final answer. Final Answer: The isentropic efficiency
    of the turbine is approximately 82.59%.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Correct answers to questions 3 from the LLM agent built by llama3-70B (Outputs
    of agent2 and function calls are omitted) Agent1 System System prompt for agent1
    Human Please help me determine the nozzle flow rate and whether there is any blockage
    with the following conditions: inlet temperature and pressure of 420K and 201325Pa,
    respectively; outlet pressure of 101325Pa; and nozzle cross-sectional area of
    0.25 m2\. AI scratchpad: LLM Thought: Do I need to use a tool? Yes. Action: calc_nozzle.
    Action Input: inlet_T = 420, inlet_P = 201325, outlet_P = 101325, throat_area
    = 0.25. ... ... Human ... Observation: {"W_nozz": 99.25500171944374, "chocked":
    "yes"}. LLM Thought: I now know the final answer. Final Answer: The nozzle is
    choked and has a mass flow rate of approximately 99.26 kg/s.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Correct answers to questions 4 from the LLM agent built by llama3-70B (Outputs
    of agent2 and function calls are omitted) Agent1 System System prompt for agent1
    Human Please calculate the outlet conditions of the combustion chamber for me
    with the following inlet conditions: temperature and pressure of 1300K and 801325Pa,
    respectively; air flow rate of 85 kg/s; and fuel flow rate of 1.4 kg/s. AI scratchpad:
    LLM Thought: Do I need to use a tool? Yes. Action: calc_burner_outlet. Action
    Input: inlet_T = 1300, inlet_P = 801325, W_air = 85, W_fuel = 1.4. ... ... Human
    ... Observation: {"burner_outlet_T": 2096.488147497805, "burner_outlet_P": 761258.75}.
    LLM Thought: I now know the burner outlet condition. Final Answer: The outlet
    temperature and pressure of the combustion chamber (BURNER) are approximately
    2096.49 K and 761258.75 Pa, respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Correct answers to questions 5 from the LLM agent built by llama3-70B (Outputs
    of agent2 and function calls are omitted) Agent1 System System prompt for agent1
    Human Please help me calculate the flow rate through a nozzle with a minimum area
    of 0.3 m2, at atmospheric pressure of 101325Pa, and with inlet conditions of 420K
    and an inlet pressure of 400kPa. AI scratchpad: LLM Thought: Do I need to use
    a tool? Yes. Action: calc_nozzle. Action Input: inlet_T = 420, inlet_P = 400000,
    outlet_P = 101325, throat_area = 0.3. ... ... Human ... Observation: {"W_nozz":
    236.64423606274923, "chocked": "yes"}. LLM Thought: I now know the final answer.
    Final Answer: The mass flow rate of the nozzle is approximately 236.64 kg/s and
    it is choked.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Incorrect answers to questions 6 from the LLM agent built by llama3-70B (Outputs
    of agent2 and function calls are omitted) Agent1 System System prompt for agent1
    Human I tested a gas turbine with the following data: Atmospheric temperature
    is 300K, pressure is 101325Pa. Compressor outlet / burner inlet temperature is
    700K, pressure is 1800kPa, fuel flow rate of 1.5 kg/s. Nozzle inlet temperature
    of 620 K, pressure of 301325Pa, nozzle area is 4.24 m2\. Please help me calculate
    the adiabatic efficiency of the compressor and the turbine. AI scratchpad: LLM
    Thought: Do I need to use a tool? Yes. Action: calc_compressor_eff. Action Input:
    inlet_T = 300, inlet_P = 101325, outlet_T = 700, outlet_P = 1800000. ... ... Human
    ... Observation: {"comp_isentropic_eff": 0.9563858170355589}. LLM Thought: I need
    to calculate the adiabatic efficiency of the turbine. Action: calc_turbine_eff.
    Action Input: inlet_T = 700, inlet_P = 1800000, outlet_T = 620, outlet_P = 101325.
    ... ... Human I tested a gas turbine with the following data: Atmospheric temperature
    is 300K, pressure is 101325Pa. Compressor outlet / burner inlet temperature is
    700K, pressure is 1800kPa, fuel flow rate of 1.5 kg/s. Nozzle inlet temperature
    of 620 K, pressure of 301325Pa, nozzle area is 4.24 m2\. Please help me calculate
    the adiabatic efficiency of the compressor and the turbine. AI scratchpad: Do
    I need to use a tool? Yes. Action: calc_compressor_eff. Action Input: inlet_T
    = 300, inlet_P = 101325, outlet_T = 700, outlet_P = 1800000\. Observation: {"comp_isentropic_eff":
    0.9563858170355589}. Thought: I need to calculate the adiabatic efficiency of
    the turbine. Action: calc_turbine_eff. Action Input: inlet_T = 700, inlet_P =
    1800000, outlet_T = 620, outlet_P = 101325\. Observation: {"turb_isentropic_eff":
    0.20390883937551146}. LLM Thought: I now know the final answer. Final Answer:
    The adiabatic efficiency of the compressor is approximately 95.64% and the adiabatic
    efficiency of the turbine is approximately 20.39%.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Correct answers to questions 7 from the LLM agent built by llama3-70B (Outputs
    of agent2 and function calls are omitted) Agent1 System System prompt for agent1
    Human I tested a gas turbine with the following data: Atmospheric temperature
    is 300K, pressure is 101325Pa. Compressor outlet / burner inlet temperature is
    700K, pressure is 1800kPa, fuel flow rate of 1.5 kg/s. Nozzle inlet temperature
    of 620 K, pressure of 301325Pa, nozzle area is 4.24 m2\. Please help me calculate
    the adiabatic efficiency of the compressor and the turbine. You should calculate
    nozzle first for air mass flow, and then calculate burner for turbine inlet. Then
    calculate the turbine efficiency. AI scratchpad: LLM Thought: Do I need to use
    a tool? Yes. Action: calc_nozzle. Action Input: inlet_T = 620, inlet_P = 301325,
    outlet_P = 101325, throat_area = 4.24. ... ... Human ... Observation: {"W_nozz":
    2073.693216788111, "chocked": "yes"}. LLM Thought: I need to use another tool
    to calculate the air mass flow rate at the burner. Action: calc_burner_outlet.
    Action Input: inlet_T = 700, inlet_P = 1800000, W_fuel = 1.5, W_air = 2073.693216788111.
    ... ... Human ... Observation: {"burner_outlet_T": 734.9797708000352, "burner_outlet_P":
    1710000.0}. LLM Thought: Do I need to use a tool? Yes. Action: calc_turbine_eff.
    Action Input: inlet_T = 734.9797708000352, inlet_P = 1710000.0, outlet_T = 620,
    outlet_P = 301325. ... ... Human ... Observation: {"turb_isentropic_eff": 0.4000508940630961}.
    LLM Thought: Do I need to use a tool? Yes. Action: calc_compressor_eff. Action
    Input: inlet_T = 300, inlet_P = 101325, outlet_T = 700, outlet_P = 1800000. ...
    ... Human ... Observation: {"comp_isentropic_eff": 0.9563858170355589}. LLM Thought:
    Thought: I now know the final answer. Final Answer: The adiabatic efficiency of
    the compressor is 0.9563858170355589 and the turbine is 0.4000508940630961.'
  prefs: []
  type: TYPE_NORMAL
