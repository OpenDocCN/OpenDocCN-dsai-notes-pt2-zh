- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-09-08 18:43:46'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'From ML to LLM: Evaluating the Robustness of Phishing Webpage Detection Models
    against Adversarial Attacks'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://ar5iv.labs.arxiv.org/html/2407.20361](https://ar5iv.labs.arxiv.org/html/2407.20361)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Aditya Kulkarni Indian Institute of Technology (IIT) DharwadIndia ,  Vivek Balachandran
    Singapore Institute of TechnologySingapore ,  Dinil Mon Divakaran ASTAR Institute
    for Infocomm ResearchSingapore  and  Tamal Das Indian Institute of Technology
    (IIT) DharwadIndia
  prefs: []
  type: TYPE_NORMAL
- en: Abstract.
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Phishing attacks attempt to deceive users into stealing sensitive information,
    posing a significant cybersecurity threat. Advances in machine learning (ML) and
    deep learning (DL) have led to the development of numerous phishing webpage detection
    solutions, but these models remain vulnerable to adversarial attacks. Evaluating
    their robustness against adversarial phishing webpages is essential. Existing
    tools contain datasets of pre-designed phishing webpages for a limited number
    of brands, and lack diversity in phishing features.
  prefs: []
  type: TYPE_NORMAL
- en: To address these challenges, we develop PhishOracle, a tool that generates adversarial
    phishing webpages by embedding diverse phishing features into legitimate webpages.
    We evaluate the robustness of two existing models, Stack model and Phishpedia,
    in classifying PhishOracle-generated adversarial phishing webpages. Additionally,
    we study a commercial large language model, Gemini Pro Vision, in the context
    of adversarial attacks. We conduct a user study to determine whether PhishOracle-generated
    adversarial phishing webpages deceive users. Our findings reveal that many PhishOracle-generated
    phishing webpages evade current phishing webpage detection models and deceive
    users, but Gemini Pro Vision is robust to the attack. We also develop the PhishOracle
    web app, allowing users to input a legitimate URL, select relevant phishing features
    and generate a corresponding phishing webpage. All resources are publicly available
    on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Cybersecurity, Phishing, Machine Learning, Deep Learning, Large Language Models,
    Adversarial
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Phishing attacks extract sensitive information from targeted users. Attackers
    create phishing webpages and share URLs with users via social media platforms,
    emails, etc. These requests deceive users into clicking on the URLs and redirect
    them to phishing webpages where they submit sensitive information. Attackers use
    this sensitive information to launch identity theft attacks or use information
    to exploit opportunities for financial profits. In Q1  phishing attacks, with
    the social media platforms being the most targeted sector, accounting for $37.4\%$
    of the attacks. Recent years have witnessed improvements in phishing webpage detection
    approaches with the use of machine learning (ML) and deep learning (DL) methods.
  prefs: []
  type: TYPE_NORMAL
- en: The ML-based phishing webpage detection solutions ([shirazi2018kn0w,](#bib.bib2)
    ; [jain2018phish,](#bib.bib3) ; [niakanlahiji2018phishmon,](#bib.bib4) ; [rao2020catchphish,](#bib.bib5)
    ) consist of several stages. Initially, datasets containing both phishing and
    legitimate samples, including URLs, HTML content, and screenshots, are collected
    from publicly available repositories. Subsequently, relevant features are extracted
    based on the URL (such as URL length, presence of @, HTTPS, hyphens in the URL,
    etc.), webpage content (such as internal and external hyperlinks, CSS styles,
    pop-up logins, <form action=""> fields, etc.), and third-party features (such
    as PageRank, Google Index, etc.). Models such as Random Forest (RF), Decision
    Tree (DT), Support Vector Machine (SVM), and many others are trained on these
    datasets, with performance evaluated using metrics like accuracy, precision, recall,
    and F1-Score. Finally, the model’s efficiency is validated on newly unseen phishing
    webpages.
  prefs: []
  type: TYPE_NORMAL
- en: With the continual progress in DL techniques, there is an enhanced capability
    to analyze webpage screenshots and logos by employing state-of-the-art computer
    vision (CV) models ([fu2006detecting,](#bib.bib6) ; [afroz2011phishzoo,](#bib.bib7)
    ; [abdelnabi2020visualphishnet,](#bib.bib8) ; [lin2021phishpedia,](#bib.bib9)
    ; [liu2022inferring,](#bib.bib10) ). DL techniques are utilized to identify brand
    logos on webpage screenshots, comparing them with a reference brand list. This
    comparison considers similarity scores and domain analysis to classify the webpage
    as phishing or legitimate.
  prefs: []
  type: TYPE_NORMAL
- en: With advancements in technology, large language models (LLMs) have gained significant
    attention and adoption across various industries. These models have revolutionized
    AI applications by leveraging DL techniques on massive datasets to understand
    and generate text, code, images, and videos with remarkable accuracy. LLMs pretrained
    on massive datasets might replace the existing models for phishing detection.
    A recent work by Koide et al. ([koide2023detecting,](#bib.bib11) ) utilizes LLMs
    to effectively detect phishing webpages.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing existing ML and DL-based phishing webpage detection approaches reveals
    significant challenges. Initially, researchers face time-consuming efforts to
    build datasets containing phishing webpages with diverse phishing features. Furthermore,
    the short-lived nature of phishing webpages necessitates the extraction of both
    content-based and third-party-based features. Subsequently, it is crucial to evaluate
    the robustness of these detection models to ensure they can accurately classify
    new phishing webpages. Recent works ([apruzzese2022mitigating,](#bib.bib12) ;
    [apruzzese2023real,](#bib.bib13) ; [lee2023attacking,](#bib.bib14) ; [charmet2024vortex,](#bib.bib15)
    ) emphasize the importance of assessing the models against adversarial phishing
    webpages to determine their performance in detecting such sophisticated threats.
  prefs: []
  type: TYPE_NORMAL
- en: Existing phishing tools (BlackEye ([BlackEye,](#bib.bib16) ), ZPhisher ([ZPhisher,](#bib.bib17)
    ), and ShellPhish ([ShellPhish,](#bib.bib18) )) contain pre-designed phishing
    webpages datasets that can be used to evaluate the robustness of phishing webpage
    detection models. However, these datasets are limited to a small number of brands
    and lack diversity in phishing features. Moreover, these tools cannot generate
    multiple versions of phishing webpages with diverse sets of phishing features.
  prefs: []
  type: TYPE_NORMAL
- en: 'To overcome these challenges, we develop a tool – PhishOracle – that generates
    adversarial phishing webpages by embedding diverse phishing features into legitimate
    webpages. PhishOracle generates these adversarial phishing webpages for given
    legitimate webpages by randomly embedding content-based and visual-based phishing
    features. Due to this randomized process, PhishOracle can generate multiple phishing
    webpages for a single legitimate webpage, each with a unique set of phishing features.
    These generated adversarial phishing webpages can be used to evaluate the robustness
    of the existing phishing webpage detection models. The agility of our tool is
    evident through the following key attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: •
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Automated: PhishOracle automates the process of phishing webpage generation
    by autonomously parsing webpage content and selecting suitable HTML tags to embed
    diverse phishing features.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: •
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Diverse: PhishOracle includes  visual-based phishing features, enabling the
    creation of diverse phishing webpages.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: •
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dynamic: PhishOracle generates phishing webpages for any given legitimate webpage
    and is not limited to a predefined set of brands.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: •
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Extensible: PhishOracle is designed to integrate additional phishing features
    as required, to accommodate future needs.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Additionally, we develop PhishOracle web app, which allows users to customize
    the inclusion of content-based and visual-based phishing features in a legitimate
    webpage. Table [1](#S1.T1 "Table 1 ‣ 1\. Introduction ‣ From ML to LLM: Evaluating
    the Robustness of Phishing Webpage Detection Models against Adversarial Attacks")
    contrasts existing phishing webpages dataset features with PhishOracle, based
    on different phishing features. PhishOracle is a grey-hat tool, primarily designed
    to validate existing phishing webpage detection solutions, which are inherently
    white-hat in nature. However, its capability to generate phishing webpages introduces
    a grey-hat aspect to its functionality.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The rest of this paper is structured as follows: Section [2](#S2 "2\. Related
    Work and Our Contributions ‣ From ML to LLM: Evaluating the Robustness of Phishing
    Webpage Detection Models against Adversarial Attacks") reviews existing phishing
    webpage datasets drawing a comparison with PhishOracle and discusses ML, DL and
    LLM models for phishing webpage detection. Section [3](#S3 "3\. Proposed Phishing
    Webpage Generation Tool: PhishOracle ‣ From ML to LLM: Evaluating the Robustness
    of Phishing Webpage Detection Models against Adversarial Attacks") discusses PhishOracle,
    a tool that generates phishing webpages by adding randomly selected content-based
    and visual-based phishing features into legitimate webpages. Section [4](#S4 "4\.
    Performance Evaluation ‣ From ML to LLM: Evaluating the Robustness of Phishing
    Webpage Detection Models against Adversarial Attacks") details the performance
    metrics and datasets used, including the creation of validation dataset using
    PhishOracle. It also presents validation results of the Stack model and Phishpedia;
    and the brand identification capability of Gemini Pro Vision on screenshots of
    phishing webpages generated by PhishOracle. Section [5](#S5 "5\. User study and
    PhishOracle Web app ‣ From ML to LLM: Evaluating the Robustness of Phishing Webpage
    Detection Models against Adversarial Attacks") describes a user study that assesses
    the effectiveness of PhishOracle-generated phishing webpages in deceiving users
    based on the visual appearance of generated phishing webpages. It also outlines
    PhishOracle web app designed to generate phishing webpages. Finally, Section [6](#S6
    "6\. Conclusion ‣ From ML to LLM: Evaluating the Robustness of Phishing Webpage
    Detection Models against Adversarial Attacks") concludes the paper by discussing
    the performance of phishing webpage detection models on PhishOracle-generated
    phishing webpages.'
  prefs: []
  type: TYPE_NORMAL
- en: Table 1. Existing Phishing Tools vs PhishOracle
  prefs: []
  type: TYPE_NORMAL
- en: '| Tools | Phishing Features | Static (S)/ Dynamic (D) |'
  prefs: []
  type: TYPE_TB
- en: '|  action="local.php"  |  Save or Mail Credentials  |  Added/Removed <script>
    tags  |  Local CSS  |  Local JS  |  Modified Hypertext References  |  Font Style  |  Disable
    <a> tags  |  Disable other login <button>  |  Popup Login  |  Disabled Right Click  |  Disabled
    CTRL and Fn  |  Body Opacity  |  Replace blank space with character  |  Logo Transformations  |'
  prefs: []
  type: TYPE_TB
- en: '| BlackEye ([BlackEye,](#bib.bib16) ) | ✓ | ✓ | ✓ |  |  |  | ✓ |  |  |  |  |  |  |  |  |
    S |'
  prefs: []
  type: TYPE_TB
- en: '| ZPhisher ([ZPhisher,](#bib.bib17) ) | ✓ | ✓ | ✓ | ✓ | ✓ |  |  |  |  |  |  |  |  |  |  |
    S |'
  prefs: []
  type: TYPE_TB
- en: '| ShellPhish ([ShellPhish,](#bib.bib18) ) | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |  |  |  |  |  |  |  |  |
    S |'
  prefs: []
  type: TYPE_TB
- en: '| PhishOracle | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |
    D |'
  prefs: []
  type: TYPE_TB
- en: 2\. Related Work and Our Contributions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we summarize the existing datasets of pre-designed phishing
    webpages, which are limited to a small set of brands. We contrast these with PhishOracle,
    which generates phishing webpages by embedding diverse phishing features into
    legitimate webpages. Additionally, we review existing ML, DL and LLM-based phishing
    webpage detection solutions.
  prefs: []
  type: TYPE_NORMAL
- en: 2.1\. Phishing Webpage Datasets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Numerous open-source phishing tools such as BlackEye ([BlackEye,](#bib.bib16)
    ), ZPhisher ([ZPhisher,](#bib.bib17) ), ShellPhish ([ShellPhish,](#bib.bib18)
    ), etc. offer pre-designed phishing webpages tailored to a small number of specific
    brands. For example, Shellphish ([ShellPhish,](#bib.bib18) ) has a dataset containing
    pre-designed phishing webpages for  brands with each webpage incorporating external
    resources such as CSS, PHP, and JS files. Consequently, whenever there is a need
    for a phishing webpage related to any of these brands, the same webpage is consistently
    fetched from the dataset. These tools exhibit two limitations: a) they cannot
    generate phishing webpages for brands not included in their predefined set, and
    b) because they already have pre-designed phishing webpages for each brand, they
    cannot provide a phishing webpage with diverse phishing features for the same
    brand. The tools are inherently static, confined to a fixed set of brands.'
  prefs: []
  type: TYPE_NORMAL
- en: 2.2\. Phishing Webpage Detection Approaches
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ML and DL techniques have significantly advanced phishing webpage detection
    by training models on large datasets containing phishing and legitimate samples.
    These datasets include URLs, webpage content, and screenshots. Phishing samples
    are obtained from repositories such as PhishTank¹¹1[https://www.phishtank.com/index.php](https://www.phishtank.com/index.php)
    and OpenPhish²²2[https://openphish.com/index.html](https://openphish.com/index.html),
    and legitimate samples are collected from Common Crawl³³3[https://commoncrawl.org/](https://commoncrawl.org/)
    and Stuff Gate⁴⁴4[https://stuffgate.com.websiteoutlook.com/](https://stuffgate.com.websiteoutlook.com/).
    Alexa⁵⁵5[https://www.expireddomains.net/alexa-top-websites/](https://www.expireddomains.net/alexa-top-websites/)
    and Tranco([LePochat2019,](#bib.bib19) ) provide a list of top-ranked legitimate
    domains, the content of which can be scraped. Datasets like UCI⁶⁶6[https://archive.ics.uci.edu/dataset/327/phishing+websites](https://archive.ics.uci.edu/dataset/327/phishing+websites),
    provide feature-extracted files containing both legitimate and phishing samples,
    including URLs, webpage content, and third-party features. ML models use these
    features to identify patterns associated with phishing webpages, while DL techniques
    use neural networks to analyze more complex patterns, such as visual similarity
    in webpage screenshots and logos.
  prefs: []
  type: TYPE_NORMAL
- en: Li et al. ([li2019stacking,](#bib.bib20) ) proposed a Stack model (GBDT, XGBoost
    and LightGBM) for phishing webpage detection using URL and HTML-based features.
    In this approach, Word2Vec model ([Word2Vec,](#bib.bib21) ) is used to learn HTML
    strings and represent them as vector encodings. The Stack model outperforms phishing
    detection solutions ([zhang2007cantina,](#bib.bib22) ; [varshney2016phish,](#bib.bib23)
    ; [verma2015character,](#bib.bib24) ) by achieving an accuracy of $96.45\%$. The
    performance of the Stack model is better than individual ML classifiers for phishing
    webpage detection.
  prefs: []
  type: TYPE_NORMAL
- en: 'As DL techniques have evolved alongside the adoption of visual-similarity-based
    approaches in phishing webpage detection, Fu et al. ([fu2006detecting,](#bib.bib6)
    ) proposed a visual similarity-based approach for phishing webpage detection.
    The algorithm consists of three stages: a) capturing a screenshot of the suspicious
    webpage, b) normalizing the screenshot to a fixed size, and c) describing the
    normalized image to a signature consisting of the pixel color and coordinate features.
    The Earth Movers’ Distance (EMD) algorithm is used to compute the visual similarity
    between the obtained visual signature and the legitimate webpage signatures and
    classifies the suspicious webpage as phishing or legitimate. However, this approach
    performs the classification at the pixel level and does not consider the text.
    As a result, it cannot detect visually dissimilar webpages.'
  prefs: []
  type: TYPE_NORMAL
- en: Afroz et al. ([afroz2011phishzoo,](#bib.bib7) ) proposed PhishZoo, a visual-based
    phishing webpage detection approach based on the webpage profile. A profile of
    a webpage contains SSL, URL, HTML content and logo features. As a browser loads
    a webpage, its profile is generated and compared with the stored profiles of legitimate
    webpages. If the loaded webpage profile does not match with the SSL, URL, HTML
    content, and logos, then the user is warned of the webpage possibly being phishing.
    PhishZoo has advantages over URL-based approaches but also has limitations, such
    as the approach failing to classify a webpage containing previous logo versions,
    and if the logos are tilted over $30$ degrees.
  prefs: []
  type: TYPE_NORMAL
- en: Reference-based phishing detection approaches, like VisualPhishNet ([abdelnabi2020visualphishnet,](#bib.bib8)
    ), compare the visual similarity of webpage screenshots. If the webpage screenshot
    resembles a similarity to a reference webpage screenshot, it marks them as similar.
    However, the model makes false positive predictions for two brands with similar
    webpage layouts and false negatives when the layout differs between a phishing
    webpage and a legitimate webpage for the same brand.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lin et al. ([lin2021phishpedia,](#bib.bib9) ) propose Phishpedia to detect
    phishing webpages and identify its target brand in a reference brand list. Phishpedia
    adopts a two-step approach: object detection and brand identification. The object
    in this context refers to the identity logo present on a webpage screenshot for
    a given brand. In the first step, the region proposal network (RPN) ([ren2015faster,](#bib.bib25)
    ) analyses the screenshot layout and predicts boxes around logos on the screenshot.
    The Faster RCNN model, based on the Detectron2 framework (from Facebook ([wu2019detectron2,](#bib.bib26)
    )), selects the identity logo having the highest confidence score from the set
    of candidate logos. The next step is logo classification, wherein a ResNetV2 network ([he2016identity,](#bib.bib27)
    ) extracts diverse features from various logo variants belonging to the same brand.
    The classification task is trained on Logo2K+ dataset ([wang2020logo,](#bib.bib28)
    ). This trained ResNetV2 model is linked with a global average pooling (GAP) layer
    to generate vectors that represent each logo. These vector representations are
    compared to logos in the reference brand list using cosine similarity ([han2012getting,](#bib.bib29)
    ). The brand exhibiting the highest similarity score is identified as the target
    brand. Upon identifying the brand represented by a logo, the system verifies the
    legitimacy of the webpage by cross-referencing its domain with the domain associated
    with the identified brand. Phishpedia outperforms EMD ([fu2006detecting,](#bib.bib6)
    ), PhishZoo ([afroz2011phishzoo,](#bib.bib7) ) and LogoSENSE ([bozkir2020logosense,](#bib.bib30)
    ) in terms of brand identification, phishing detection and runtime overhead.'
  prefs: []
  type: TYPE_NORMAL
- en: With the technological advancements, LLMs have gained attention in various sectors
    and are also used in the phishing detection field. In recent work, Koide et al. ([koide2023detecting,](#bib.bib11)
    ) propose ChatPhishDetector, which utilizes LLMs to effectively detect phishing
    webpages by leveraging web crawling and prompt generation based on crawled data,
    achieving high accuracy in identifying malicious web content without the need
    for training ML models. As large language models, pretrained on massive datasets,
    might replace the existing models for phishing webpage detection, we take a proactive
    approach to study a commercial LLM – Gemini Pro Vision⁷⁷7LLM developed by Google
    DeepMind [https://deepmind.google/technologies/gemini/pro/](https://deepmind.google/technologies/gemini/pro/),
    optimized for both cost and latency, demonstrates strong performance across diverse
    tasks. With enhanced reasoning capabilities and multimodal features, the model
    accommodates textual and visual inputs, including images, graphs, screenshots,
    and videos. It can also analyze the webpage component layout, scrutinise logos
    to identify the targeted brand, and conduct webpage content analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Recent works in phishing detection also concentrate on how the phishing detection
    models perform to classify adversarial phishing evasions. Sabir et al. ([sabir2022reliability,](#bib.bib31)
    ) propose URLBUG, an adversarial URL generator designed to generate adversarial
    phishing URLs by targeting the domain, path and top-level domain parts of URLs.
    These generated adversarial URLs are used to evaluate the robustness of several
    ML-based phishing URL detectors. The experimental results reveal that these adversarial
    URLs significantly challenge the ML-based phishing URL detectors, showing vulnerabilities
    and limitations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Object detection models are also prone to adversarial attacks, allowing attackers
    to create adversarial logos that closely resemble the legitimate ones and evade
    logo-based phishing webpage detectors ([divakaran2022phishing,](#bib.bib32) ).
    Apruzzese et al. ([apruzzese2023real,](#bib.bib13) ) examines the real-world impact
    of adversarial techniques on phishing webpage detection models. Their findings
    reveal that attackers use simple, low-complexity methods such as blurring, cropping,
    and masking logos to evade ML-based phishing webpage detectors. Another work by
    Lee et al. ([lee2023attacking,](#bib.bib14) ) generates adversarial logos by adding
    noise to brand logos in a reference brand list, enabling these logos to evade
    logo-based phishing webpage detection solutions. A recent work ([charmet2024vortex,](#bib.bib15)
    ), proposes a visual-based approach to detect phishing webpages, which identifies
    brand names in webpage screenshots and uses eXplainable AI (XAI) to justify its
    decisions. In another work, Apruzzese et al. ([apruzzese2022mitigating,](#bib.bib12)
    ) introduce two sets of adversarial attacks: one where an attacker modifies only
    a few known features and another where the attacker has partial knowledge of the
    feature set. They develop a robust phishing webpage detection model that withstands
    these attacks, demonstrating significant performance improvements over existing
    phishing webpage detection models, which struggle against these adversarial attacks.'
  prefs: []
  type: TYPE_NORMAL
- en: Inspired by recent efforts to evaluate the robustness of the phishing webpage
    detection models against adversarial phishing webpages ([apruzzese2022mitigating,](#bib.bib12)
    ; [apruzzese2023real,](#bib.bib13) ; [lee2023attacking,](#bib.bib14) ), we develop
    a tool that generates such adversarial phishing webpages. This tool aims to enhance
    phishing webpage detection models by identifying vulnerabilities through adversarial
    techniques, particularly targeting visual elements such as logos. Attackers often
    manipulate these elements using low-complexity methods such as blurring, cropping,
    and masking ([apruzzese2023real,](#bib.bib13) ).
  prefs: []
  type: TYPE_NORMAL
- en: 2.3\. Our Contributions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: (1)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We propose PhishOracle, the first-ever phishing webpage generator capable of
    producing adversarial phishing webpages by randomly embedding content-based and
    visual-based phishing features into legitimate webpages. These generated adversarial
    phishing webpages can be used to evaluate the robustness of ML, DL and LLM models.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: (2)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We conduct a user study to evaluate the effectiveness of phishing webpages generated
    by PhishOracle to deceive users. The experiment results demonstrate that on average
    $\approx 48\%$ of these generated phishing webpages are incorrectly classified
    as legitimate by the users.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: (3)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We develop PhishOracle web app, enabling users to input a legitimate URL, select
    relevant features, and generate corresponding phishing webpages.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: (4)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we contribute a dataset containing $9,067$ legitimate webpage screenshots,
    on which we manually labelled the identity logos. The PhishOracle code base, web
    app, generated phishing webpages, and survey screenshots are available on our
    GitHub repositories ([PHISHORACLE_GITHUB_anonymous,](#bib.bib33) ; [PHISHORACLE_WEBAPP_GITHUB_anonymous,](#bib.bib34)
    ).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '3\. Proposed Phishing Webpage Generation Tool: PhishOracle'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Attackers create phishing webpages to collect users’ sensitive information.
    Typically, they modify specific HTML tags like <form>, <a>, <link>, <script>,
    etc., redirecting the acquired sensitive information to databases or email addresses
    owned by the attackers. In addition to content-based webpage features, maintaining
    style consistency is another critical aspect that can deceive users. Typically,
    all webpages in the same organization adhere to a uniform style. The overall style
    similarity focuses on the visual aesthetics of a webpage, which can be characterized
    by various CSS design elements such as background colors, text alignments, font
    family, font size and subtle variations in favicons and logos. When integrated
    into a legitimate webpage, these visual-based features do not significantly alter
    its layout, but are sufficient to mislead users into believing that the phishing
    webpage originates from the legitimate domain owner. The visual resemblance between
    the generated phishing webpage and the legitimate styling is remarkably close,
    further deceiving users into perceiving the phishing webpage as a replica of the
    legitimate one. However, for these phishing webpages to reach users, the actual
    targets of the attackers, they must first evade phishing webpage detection models.
    To achieve this, adversarial phishing webpages are created with subtle modifications
    that allow them to evade phishing webpage detection models, increasing the likelihood
    that they will reach the users and deceive them.
  prefs: []
  type: TYPE_NORMAL
- en: '<svg id="S3.F1.pic1" class="ltx_picture ltx_centering ltx_figure_panel" height="132.49"
    overflow="visible" version="1.1" width="604.57"><g transform="translate(0,132.49)
    matrix(1 0 0 -1 0 0) translate(34.73,0) translate(0,105.16)" fill="#000000" stroke="#000000"><g
    stroke-width="0.4pt"><g transform="matrix(1.0 0.0 0.0 1.0 -15.39 -4.73)" fill="#000000"
    stroke="#000000"><foreignobject width="30.79" height="9.46" transform="matrix(1
    0 0 -1 0 16.6)" overflow="visible">Start</foreignobject></g> <g transform="matrix(1.0
    0.0 0.0 1.0 100.39 12.76)" fill="#000000" stroke="#000000"><foreignobject width="177.17"
    height="44.89" transform="matrix(1 0 0 -1 0 16.6)" overflow="visible">Input: One
    Legitimate URL Set of phishing features <g stroke="#000000" fill="#FFFFFF"><path
    d="M 343.81 -19.69 h 225.76 v 39.37 h -225.76 Z"></path></g><g transform="matrix(1.0
    0.0 0.0 1.0 348.43 4.69)" fill="#000000" stroke="#000000"><foreignobject width="216.54"
    height="28.75" transform="matrix(1 0 0 -1 0 16.6)" overflow="visible">Request
    the URL, Download the landing webpage</foreignobject></g> <g stroke="#000000"
    fill="#FFFFFF"><path d="M 343.81 -98.08 h 225.76 v 54.42 h -225.76 Z"></path></g><g
    transform="matrix(1.0 0.0 0.0 1.0 348.43 -57.95)" fill="#000000" stroke="#000000"><foreignobject
    width="216.54" height="45.2" transform="matrix(1 0 0 -1 0 16.6)" overflow="visible">Add
    randomly selected content and visual-based phishing features to the webpage</foreignobject></g>
    <g stroke="#000000" fill="#FFFFFF"><path d="M 71.02 -104.88 L 95.78 -36.85 L 306.93
    -36.85 L 282.17 -104.88 Z"></path></g><g transform="matrix(1.0 0.0 0.0 1.0 100.39
    -51.15)" fill="#000000" stroke="#000000"><foreignobject width="177.17" height="58.81"
    transform="matrix(1 0 0 -1 0 16.6)" overflow="visible">Output: Phishing webpage
    containing set of embedded phishing features</foreignobject></g> <g stroke="#000000"
    fill="#FFFFFF"><path d="M 28.91 -51.18 L -28.91 -51.18 C -31.97 -51.18 -34.45
    -53.66 -34.45 -56.72 L -34.45 -85.02 C -34.45 -88.07 -31.97 -90.55 -28.91 -90.55
    L 28.91 -90.55 C 31.97 -90.55 34.45 -88.07 34.45 -85.02 L 34.45 -56.72 C 34.45
    -53.66 31.97 -51.18 28.91 -51.18 Z M -34.45 -90.55"></path></g><g transform="matrix(1.0
    0.0 0.0 1.0 -13.84 -74.25)" fill="#000000" stroke="#000000"><foreignobject width="27.67"
    height="12.15" transform="matrix(1 0 0 -1 0 16.6)" overflow="visible">Stop</foreignobject></g><g
    stroke-width="0.8pt"><path d="M 34.73 0 L 82.04 0" style="fill:none"><g transform="matrix(1.0
    0.0 0.0 1.0 82.04 0)"><path d="M 3.6 0 L -2.16 2.88 L 0 0 L -2.16 -2.88" style="stroke:none"></path></g></path></g><g
    stroke-width="0.8pt"><path d="M 292.32 0 L 339.94 0" style="fill:none"><g transform="matrix(1.0
    0.0 0.0 1.0 339.94 0)"><path d="M 3.6 0 L -2.16 2.88 L 0 0 L -2.16 -2.88" style="stroke:none"></path></g></path></g><g
    stroke-width="0.8pt"><path d="M 456.69 -19.96 L 456.69 -39.78" style="fill:none"><g
    transform="matrix(0.0 -1.0 1.0 0.0 456.69 -39.78)"><path d="M 3.6 0 L -2.16 2.88
    L 0 0 L -2.16 -2.88" style="stroke:none"></path></g></path></g><g stroke-width="0.8pt"><path
    d="M 343.54 -70.87 L 298.44 -70.87" style="fill:none"><g transform="matrix(-1.0
    0.0 0.0 -1.0 298.44 -70.87)"><path d="M 3.6 0 L -2.16 2.88 L 0 0 L -2.16 -2.88"
    style="stroke:none"></path></g></path></g><g stroke-width="0.8pt"><path d="M 83.11
    -70.87 L 38.32 -70.87" style="fill:none"><g transform="matrix(-1.0 0.0 0.0 -1.0
    38.32 -70.87)"><path d="M 3.6 0 L -2.16 2.88 L 0 0 L -2.16 -2.88" style="stroke:none"></path></g></path></g>'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1. Phishing Webpage Generation Tool
  prefs: []
  type: TYPE_NORMAL
- en: \Description
  prefs: []
  type: TYPE_NORMAL
- en: Phishing Webpage Generation Tool
  prefs: []
  type: TYPE_NORMAL
- en: 'We propose PhishOracle to generate adversarial phishing webpages for any given
    legitimate webpage by randomly embedding content-based and visual-based features
    (refer Table [2](#S3.T2 "Table 2 ‣ 3\. Proposed Phishing Webpage Generation Tool:
    PhishOracle ‣ From ML to LLM: Evaluating the Robustness of Phishing Webpage Detection
    Models against Adversarial Attacks")). Figure [1](#S3.F1 "Figure 1 ‣ 3\. Proposed
    Phishing Webpage Generation Tool: PhishOracle ‣ From ML to LLM: Evaluating the
    Robustness of Phishing Webpage Detection Models against Adversarial Attacks")
    depicts the workflow of PhishOracle, with two inputs: a legitimate URL and a set/count
    of phishing features to add to the input legitimate webpage. Firstly, the legitimate
    URL is requested to fetch and save the webpage content and associated resources.
    Secondly, the algorithm parses the webpage content to deduce the list of applicable
    phishing features from Table [2](#S3.T2 "Table 2 ‣ 3\. Proposed Phishing Webpage
    Generation Tool: PhishOracle ‣ From ML to LLM: Evaluating the Robustness of Phishing
    Webpage Detection Models against Adversarial Attacks"). For example, if the webpage
    content contains anchor tags (<a>) then, relevant phishing features like C1, C3,
    C4, C5 and C10 (refer Table [2](#S3.T2 "Table 2 ‣ 3\. Proposed Phishing Webpage
    Generation Tool: PhishOracle ‣ From ML to LLM: Evaluating the Robustness of Phishing
    Webpage Detection Models against Adversarial Attacks")) are embedded in the webpage
    to generate its corresponding phishing webpage.'
  prefs: []
  type: TYPE_NORMAL
- en: Table 2. List of Phishing Features based on the Content and Visual Attributes
    in a Webpage
  prefs: []
  type: TYPE_NORMAL
- en: '| Type | Naming | Phishing Features | Explanation |'
  prefs: []
  type: TYPE_TB
- en: '| Content | C1 | Hypertext reference | Updating href with: href="#", "#content",
    "#skip" or |'
  prefs: []
  type: TYPE_TB
- en: '|  |  |    "Javascript:void(0)" |'
  prefs: []
  type: TYPE_TB
- en: '| C2 | Disable key functions | Restrict users to view source code by disabling
    f11 and |'
  prefs: []
  type: TYPE_TB
- en: '|  |  |    Ctrl + U |'
  prefs: []
  type: TYPE_TB
- en: '| C3 | href lookalike characters | Alphabets in href value are replaced by
    lookalike characters |'
  prefs: []
  type: TYPE_TB
- en: '|  |  |    Ex: replacing a with a lookalike character ā, á, ä, etc. |'
  prefs: []
  type: TYPE_TB
- en: '| C4 | Hide links appearing on | This feature does not allow users to view
    the href link |'
  prefs: []
  type: TYPE_TB
- en: '|  |    status bar |    even on hovering on the link |'
  prefs: []
  type: TYPE_TB
- en: '| C5 | Disable anchor tags | Does not allow a user to navigate to other pages
    by |'
  prefs: []
  type: TYPE_TB
- en: '|  |  |    clicking on the anchor tags |'
  prefs: []
  type: TYPE_TB
- en: '| C6 | Replace blank space | Blank spaces present in the container elements
    of HTML |'
  prefs: []
  type: TYPE_TB
- en: '|  |    with a character |    like h1, p, span tags are replaced with characters
    |'
  prefs: []
  type: TYPE_TB
- en: '|  |  |    with style=color: transparent; |'
  prefs: []
  type: TYPE_TB
- en: '| C7 | Save credentials | The credentials entered in the HTML form input tags
    are |'
  prefs: []
  type: TYPE_TB
- en: '|  |  |    stored in a local file |'
  prefs: []
  type: TYPE_TB
- en: '| C8 | Disable other login | Webpages containing login buttons like Google,
    GitHub, |'
  prefs: []
  type: TYPE_TB
- en: '|  |    buttons |    LinkedIn, etc are disabled and the credentials entered
    |'
  prefs: []
  type: TYPE_TB
- en: '|  |  |    in the visible login page are stored locally. |'
  prefs: []
  type: TYPE_TB
- en: '| C9 | Pop-up Login | Clicking the login or sign-up button triggers a login
    page |'
  prefs: []
  type: TYPE_TB
- en: '|  |  |    to appear. The action field in the <form> tag is then |'
  prefs: []
  type: TYPE_TB
- en: '|  |  |    altered, to store the credentials locally |'
  prefs: []
  type: TYPE_TB
- en: '| C10 | Pop-up Login by | Clicking the anchor tags, opens up a login page |'
  prefs: []
  type: TYPE_TB
- en: '|  |    clicking on a tags |    and the credentials are stored locally |'
  prefs: []
  type: TYPE_TB
- en: '| C11 | IFrame tag with | <iframe> tags are added with a login page, the credentials
    |'
  prefs: []
  type: TYPE_TB
- en: '|  |    login page |    entered are stored locally |'
  prefs: []
  type: TYPE_TB
- en: '| C12 | Add dummy tags | Dummy <img>, <link>, <script>, <a> and <div> tags
    |'
  prefs: []
  type: TYPE_TB
- en: '|  |  |    are added to increase the DOM structure of webpage |'
  prefs: []
  type: TYPE_TB
- en: '| Visual | V1 | Body Opacity | CSS opacity adjusts webpage transparency from
    . |'
  prefs: []
  type: TYPE_TB
- en: '| V2 | Text Styling | The font-family changes the style of webpage text |'
  prefs: []
  type: TYPE_TB
- en: '| V3 | Opacity on Logo | CSS opacity property makes the logo image transparent.
    |'
  prefs: []
  type: TYPE_TB
- en: '|  |  | <img> tags containing images with .png and .svg |'
  prefs: []
  type: TYPE_TB
- en: '|  |  |    extensions are considered and a opacity of  is |'
  prefs: []
  type: TYPE_TB
- en: '|  |  |    added to make the logo transparent |'
  prefs: []
  type: TYPE_TB
- en: '| V4 | Adding Watermark on logo | A watermark is added either on the bottom
    right corner or |'
  prefs: []
  type: TYPE_TB
- en: '|  |  |    diagonally on logo image |'
  prefs: []
  type: TYPE_TB
- en: '| V5 | Image Transformations | Techniques like adding (1) clockwise or anti-clockwise
    |'
  prefs: []
  type: TYPE_TB
- en: '|  |  |    rotation, (2) Gaussian blur, (3) grey-mesh and (4) noise, |'
  prefs: []
  type: TYPE_TB
- en: '|  |  |    transforms the logo image |'
  prefs: []
  type: TYPE_TB
- en: '![Refer to caption](img/da26aa4063f77a74f5d53eecef6eed22.png)'
  prefs: []
  type: TYPE_IMG
- en: (a) Legitimate webpage
  prefs: []
  type: TYPE_NORMAL
- en: '![Refer to caption](img/720366b00edf29fafefb1d091473cdae.png)'
  prefs: []
  type: TYPE_IMG
- en: (b) Generated Phishing webpage
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2. PhishOracle-generated webpage
  prefs: []
  type: TYPE_NORMAL
- en: \Description
  prefs: []
  type: TYPE_NORMAL
- en: Legitimate and PhishOracle-generated webpage
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure [2](#S3.F2 "Figure 2 ‣ 3\. Proposed Phishing Webpage Generation Tool:
    PhishOracle ‣ From ML to LLM: Evaluating the Robustness of Phishing Webpage Detection
    Models against Adversarial Attacks") shows a legitimate webpage and its corresponding
    phishing webpage generated by PhishOracle by embedding content-based (C2, C5,
    C7, C9, and C12) and visual-based (V1, V2) phishing features as listed in Table [2](#S3.T2
    "Table 2 ‣ 3\. Proposed Phishing Webpage Generation Tool: PhishOracle ‣ From ML
    to LLM: Evaluating the Robustness of Phishing Webpage Detection Models against
    Adversarial Attacks").'
  prefs: []
  type: TYPE_NORMAL
- en: To produce a lookalike URL for the phishing webpage generated by PhishOracle,
    a combination of homoglyphs, prefixes, and suffixes is utilized on the legitimate
    domain name. This combination results in the creation of domains that closely
    resemble legitimate domains, followed by corresponding URL parameters. For instance,
    if we consider the legitimate domain facebook.com, this process generates a lookalike
    domain such as facebock-login.co. This technique involves a variety of homoglyphs,
    prefixes, and suffixes, all contributing to the generation of these phishing domain
    names. A selection of homoglyphs examples includes substituting d with cl, m with
    nn, w with vv, l with 1, c with o, m with rn, etc. Additionally, there are prefixes
    like secure-, logon-, and login-, as well as suffixes such as -login, -logon,
    and -secure, etc.
  prefs: []
  type: TYPE_NORMAL
- en: '![Refer to caption](img/7b0bcc647a6d2b0b22d62fe75dd6f00e.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3. Phishing Webpage Generated by PhishOracle Marked as Dangerous by Google
    Safe Browsing
  prefs: []
  type: TYPE_NORMAL
- en: \Description
  prefs: []
  type: TYPE_NORMAL
- en: Phishing Webpage Generated by PhishOracle Marked as Dangerous by Google Safe
    Browsing
  prefs: []
  type: TYPE_NORMAL
- en: 'To determine the effectiveness of phishing webpages generated by PhishOracle,
    we host one of the generated phishing webpages on GitHub pages. The hosted webpage
    included content-based features like C1, C2, C6, C10, C12, and visual-based features
    like V1, V2, and V5 (refer Table [2](#S3.T2 "Table 2 ‣ 3\. Proposed Phishing Webpage
    Generation Tool: PhishOracle ‣ From ML to LLM: Evaluating the Robustness of Phishing
    Webpage Detection Models against Adversarial Attacks")). Within an hour, the hosted
    webpage had been flagged as “Dangerous” by the Google Safe Browser (GSB), as depicted
    in Figure [3](#S3.F3 "Figure 3 ‣ 3\. Proposed Phishing Webpage Generation Tool:
    PhishOracle ‣ From ML to LLM: Evaluating the Robustness of Phishing Webpage Detection
    Models against Adversarial Attacks").'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Performance Evaluation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we describe the performance metrics used to evaluate ML models.
    We also detail the datasets used in our experiments. Section [4.3](#S4.SS3 "4.3\.
    Generating PhishOracle Validation Dataset ‣ 4\. Performance Evaluation ‣ From
    ML to LLM: Evaluating the Robustness of Phishing Webpage Detection Models against
    Adversarial Attacks") describes the generation of the PhishOracle validation dataset
    to assess the efficiency of ML, and DL models for phishing webpage detection.
    And, assess an LLM model to identify target brands on the screenshots of PhishOracle-generated
    phishing webpages. In Section [4.4](#S4.SS4 "4.4\. Validating Phishing Webpage
    Detection Models ‣ 4\. Performance Evaluation ‣ From ML to LLM: Evaluating the
    Robustness of Phishing Webpage Detection Models against Adversarial Attacks"),
    we evaluate the performance of phishing webpage detection solutions on PhishOracle
    validation dataset.'
  prefs: []
  type: TYPE_NORMAL
- en: 4.1\. Performance Metrics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The fundamental metrics to evaluate classifiers are True Positive (TP), False
    Positive (FP), True Negative (TN), and False Negative (FN). In the context of
    the phishing detection models, these metrics are used for determining the count
    of actual to predicted values as shown in Table [3](#S4.T3 "Table 3 ‣ 4.1\. Performance
    Metrics ‣ 4\. Performance Evaluation ‣ From ML to LLM: Evaluating the Robustness
    of Phishing Webpage Detection Models against Adversarial Attacks"). The metrics
    TP, FP, TN and FN are elaborated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: •
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'True Positive (TP): The model correctly identifies a phishing website as phishing.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: •
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'False Positive (FP): The model incorrectly identifies a legitimate website
    as phishing.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: •
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'True Negative (TN): The model correctly identifies a legitimate website as
    legitimate.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: •
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'False Negative (FN): The model incorrectly identifies a phishing website as
    legitimate.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Table 3. Confusion Matrix
  prefs: []
  type: TYPE_NORMAL
- en: '|  | Predicted |'
  prefs: []
  type: TYPE_TB
- en: '| Phishing | Legitimate |'
  prefs: []
  type: TYPE_TB
- en: '| Actual | Phishing | True Positive | False Negative |'
  prefs: []
  type: TYPE_TB
- en: '| Legitimate | False Positive | True Negative |'
  prefs: []
  type: TYPE_TB
- en: These metrics are used to compute the Accuracy (), Recall () of classifiers.
  prefs: []
  type: TYPE_NORMAL
- en: 4.2\. Dataset Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With technological advancements, attackers find new features to evade existing
    phishing webpage detection solutions. Various solutions ([zhang2007cantina,](#bib.bib22)
    ; [varshney2016phish,](#bib.bib23) ; [verma2015character,](#bib.bib24) ; [li2019stacking,](#bib.bib20)
    ) consider URL and HTML features, and a few solutions ([fu2006detecting,](#bib.bib6)
    ; [afroz2011phishzoo,](#bib.bib7) ; [abdelnabi2020visualphishnet,](#bib.bib8)
    ; [lin2021phishpedia,](#bib.bib9) ) use visual similarity features to classify
    new phishing webpages. With the current research focus on evaluating the robustness
    of phishing webpage detection models against adversarial phishing webpages, we
    evaluate existing models for phishing webpage detection ([apruzzese2022mitigating,](#bib.bib12)
    ; [apruzzese2023real,](#bib.bib13) ; [lee2023attacking,](#bib.bib14) ) using adversarial
    phishing webpages generated by PhishOracle.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our study, we select the Stack model ([li2019stacking,](#bib.bib20) ) due
    to its effectiveness in ML-based phishing webpage detection, to assess its capability
    to classify PhishOracle-generated adversarial phishing webpages that include a
    variety of phishing features. Additionally, we select Phishpedia ([lin2021phishpedia,](#bib.bib9)
    ), known for its robustness in phishing webpage detection and identifying target
    brands in webpage screenshots. This makes it ideal for identifying brands in adversarial
    phishing webpage screenshots generated by PhishOracle, incorporating different
    logo transformation techniques. Finally, we select Gemini Pro Vision[7](#footnote7
    "footnote 7 ‣ 2.2\. Phishing Webpage Detection Approaches ‣ 2\. Related Work and
    Our Contributions ‣ From ML to LLM: Evaluating the Robustness of Phishing Webpage
    Detection Models against Adversarial Attacks") to evaluate its accuracy in identifying
    the target brand in adversarial phishing webpage screenshots generated by PhishOracle.'
  prefs: []
  type: TYPE_NORMAL
- en: As the datasets to train these models ([li2019stacking,](#bib.bib20) ; [lin2021phishpedia,](#bib.bib9)
    ) have become outdated, we retrain them using our latest datasets (, respectively)
    to evaluate their robustness in detecting adversarial phishing webpages generated
    by PhishOracle.
  prefs: []
  type: TYPE_NORMAL
- en: Table 4. Dataset Size and Description
  prefs: []
  type: TYPE_NORMAL
- en: '| Notation | Description | Collection | Sample Size |'
  prefs: []
  type: TYPE_TB
- en: '| Period | Phishing | Legitimate | PhishOracle |'
  prefs: []
  type: TYPE_TB
- en: '|  |  |  |  |  | (generated phishing) |'
  prefs: []
  type: TYPE_TB
- en: '|  to |  | $0$ |'
  prefs: []
  type: TYPE_TB
- en: '| HTML content of both phishing | Jan’$24$ |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| and legitimate webpages. It |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| serves as the training dataset |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| for the Stack model ([li2019stacking,](#bib.bib20) ) |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '|  |  | $0$ |'
  prefs: []
  type: TYPE_TB
- en: '| URLs and screenshots to train |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Phishpedia Faster RCNN |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| model ([lin2021phishpedia,](#bib.bib9) ) |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '|  |  | $1,000$ |'
  prefs: []
  type: TYPE_TB
- en: '| on Stack model ([li2019stacking,](#bib.bib20) ), consists |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| of URLs and HTML content |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| from legitimate and PhishOracle |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| generated webpages |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Legitimate samples of $\mathcal{P}^{1}\subset\mathcal{T}^{2}$. |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '|  |  | $170$ |'
  prefs: []
  type: TYPE_TB
- en: '| Phishpedia ([lin2021phishpedia,](#bib.bib9) ) and Gemini Pro |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Vision[7](#footnote7 "footnote 7 ‣ 2.2\. Phishing Webpage Detection Approaches
    ‣ 2\. Related Work and Our Contributions ‣ From ML to LLM: Evaluating the Robustness
    of Phishing Webpage Detection Models against Adversarial Attacks"), consists of
    URLs and |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| screenshots of legitimate and |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| PhishOracle generated webpages |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Legitimate samples of $\mathcal{P}^{2}\subset\mathcal{T}^{2}$. |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: 'Table [4](#S4.T4 "Table 4 ‣ 4.2\. Dataset Description ‣ 4\. Performance Evaluation
    ‣ From ML to LLM: Evaluating the Robustness of Phishing Webpage Detection Models
    against Adversarial Attacks") details the datasets used in our experiments. We
    collect these dataset samples by using a Python script that includes various libraries,
    such as selenium, requests, and urllib.parse. This script scraped  and January  and  dataset
    is used to train Phishpedia, it includes webpage screenshots of all the brands
    in the reference brand list. However, some brands prohibited downloading the webpage
    content but allowed to capture screenshots, while others prohibited both. For
    such brands, we manually took screenshots to ensure their inclusion in Phishpedia’s
    reference brand list. The  validation dataset by selecting  dataset and generate
    corresponding adversarial phishing webpages using PhishOracle. Additionally, we
    create  brands from $\mathcal{T}^{2}$ dataset, all included in Phishpedia’s reference
    brand list, and generate corresponding adversarial phishing webpages using PhishOracle
    and capture their screenshots.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The  is used as the validation dataset. For the Phishpedia ([lin2021phishpedia,](#bib.bib9)
    ), the  phishing webpage screenshots from  legitimate webpage screenshots from  for
    Stack model, and  legitimate webpage screenshots for Phishpedia) are collectively
    referred to as CleanSet. The entire Phishpedia model is then evaluated on the  dataset
    is used to determine the accuracy of Gemini Pro Vision[7](#footnote7 "footnote
    7 ‣ 2.2\. Phishing Webpage Detection Approaches ‣ 2\. Related Work and Our Contributions
    ‣ From ML to LLM: Evaluating the Robustness of Phishing Webpage Detection Models
    against Adversarial Attacks") in identifying the brand in each of the webpage
    screenshots. Note that the  and $\mathcal{P}^{2}$) are collectively referred to
    as EvasionSet.'
  prefs: []
  type: TYPE_NORMAL
- en: 4.3\. Generating PhishOracle Validation Dataset
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Developed using Python version  legitimate webpages (from  phishing webpages.
    This builds the $\mathcal{P}^{1}$ validation dataset. The algorithm includes a
    mechanism for detecting relevant tags within the webpages. The detection of such
    tags triggers the embedding of corresponding phishing features into the webpage
    content. For instance, if the algorithm identifies <a> tag within the legitimate
    webpage, it embeds features such as C1, C3, C5, C10 and C12 (refer Table [2](#S3.T2
    "Table 2 ‣ 3\. Proposed Phishing Webpage Generation Tool: PhishOracle ‣ From ML
    to LLM: Evaluating the Robustness of Phishing Webpage Detection Models against
    Adversarial Attacks")), resulting in the generation of the corresponding phishing
    webpage. This entire process ensures the creation of balanced sets comprising
    legitimate and corresponding phishing webpages.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the Phishpedia experiment, we select  dataset), all belonging to Phishpedia’s
    reference brand list, and generate corresponding adversarial phishing webpages.
    These adversarial phishing webpages are generated by incorporating visual-based
    features on logos (refer Table [2](#S3.T2 "Table 2 ‣ 3\. Proposed Phishing Webpage
    Generation Tool: PhishOracle ‣ From ML to LLM: Evaluating the Robustness of Phishing
    Webpage Detection Models against Adversarial Attacks")). Note that a single webpage
    can have multiple PhishOracle-generated phishing webpages, each generated by embedding
    different visual-based features, specifically by incorporating logo transformation
    techniques (refer to visual-based features in Table [2](#S3.T2 "Table 2 ‣ 3\.
    Proposed Phishing Webpage Generation Tool: PhishOracle ‣ From ML to LLM: Evaluating
    the Robustness of Phishing Webpage Detection Models against Adversarial Attacks")).
    We capture the screenshots of these  generated phishing webpages and build the  and
    $\mathcal{P}^{2}$ datasets) using homoglyphs, suffixes, and prefixes. The source
    code and the datasets used in this experiment are available on our GitHub repository ([PHISHORACLE_GITHUB_anonymous,](#bib.bib33)
    ).'
  prefs: []
  type: TYPE_NORMAL
- en: 4.4\. Validating Phishing Webpage Detection Models
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this section, we discuss the experiment setup for Stack model ([li2019stacking,](#bib.bib20)
    ), Phishpedia ([lin2021phishpedia,](#bib.bib9) ) and Gemini Pro Vision[7](#footnote7
    "footnote 7 ‣ 2.2\. Phishing Webpage Detection Approaches ‣ 2\. Related Work and
    Our Contributions ‣ From ML to LLM: Evaluating the Robustness of Phishing Webpage
    Detection Models against Adversarial Attacks"), and illustrate their performance
    on detecting adversarial phishing webpages generated by PhishOracle.'
  prefs: []
  type: TYPE_NORMAL
- en: 4.4.1\. Stack Model
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Li et al. ([li2019stacking,](#bib.bib20) ) propose a Stack model for phishing
    webpage detection using URL and HTML features, without considering third-party-based
    features (like DNS records, web traffic, etc.).
  prefs: []
  type: TYPE_NORMAL
- en: 'Setup: To carry out our experiments, we use the feature extraction code of
    Stack Model made available by Phishpedia’s authors on their GitHub repository ([Phishpedia_GitHub,](#bib.bib35)
    ) and we develop the Stack model using GBDT, XGBoost and LightGBM classifiers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Training & Testing the model: We use  phishing and , a high precision of  on
    the $\mathcal{T}^{1}$ dataset.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Validation on PhishOracle dataset: For evaluating the robustness of the Stack
    model, we now use the , a precision of . Observe that, this is a significant reduction
    in the classification performance in comparison to the performance achieved on
    the test set CleanSet (as mentioned above). Therefore, the Stack model is not
    robust to simple feature modifications (refer Section [3](#S3 "3\. Proposed Phishing
    Webpage Generation Tool: PhishOracle ‣ From ML to LLM: Evaluating the Robustness
    of Phishing Webpage Detection Models against Adversarial Attacks")), and confirms
    the observations made in a recent study ([lee2020building,](#bib.bib36) ).'
  prefs: []
  type: TYPE_NORMAL
- en: 4.4.2\. Phishpedia
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Lin et al. ([lin2021phishpedia,](#bib.bib9) ) propose Phishpedia to detect phishing
    webpages targeting a specific brand in a reference brand list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Setup: We initiate the experiment by cloning the Phishpedia GitHub repository ([Phishpedia_GitHub,](#bib.bib35)
    ). To carry out this experiment on Phishpedia, we manually labelled identity logos
    on  dataset.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Training & Testing the model: In this experiment, we consider two datasets.
    For evaluating the object detection task, we use  legitimate URLs and webpage
    screenshots, and split it into  for testing. This results in a train:test split
    of 83:17\. For the brand identification task, which uses the Siamese model pretrained
    on Logo2K+ dataset ([wang2020logo,](#bib.bib28) ), and the phishing detection
    task, we use  dataset and  dataset, with a train:test split of 80:20.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Observations: The logo detection task achieves the mean Average Precision (mAP) ([henderson2017end,](#bib.bib37)
    ) of  of phishing webpages. In phishing detection, the entire Phishpedia system
    achieves a precision of . The values are slightly lower than the precision of  reported
    in the paper ([lin2021phishpedia,](#bib.bib9) ); the reasons could be that, we
    have a smaller dataset for training in our work, or there is a difference in the
    quality of data. However, close to  is still a good performance.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Validation on PhishOracle dataset: Finally, we evaluate the newly trained Phishpedia
    system on the  legitimate webpage screenshots and  at a recall of $40\%$ for phishing
    detection. Observe that the PhishOracle-generated adversarial phishing webpage
    screenshots containing logo transformation techniques (such as adding watermark,
    noise, etc.), can evade brand identification in the Phishpedia model.'
  prefs: []
  type: TYPE_NORMAL
- en: 4.4.3\. Gemini Pro Vision
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'With the emergence of LLMs, we today have several multi-modal models that can
    process images. Gemini Pro Vision[7](#footnote7 "footnote 7 ‣ 2.2\. Phishing Webpage
    Detection Approaches ‣ 2\. Related Work and Our Contributions ‣ From ML to LLM:
    Evaluating the Robustness of Phishing Webpage Detection Models against Adversarial
    Attacks"), an LLM developed by Google, possesses multi-modal analysis capabilities,
    including text processing, image analysis, audio content analysis, and video comprehension.
    The capabilities of the model to analyse images make it suitable for our task
    of brand identification in webpage screenshots.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Setup: Our goal here is to evaluate the brand identification capability of
    Gemini Pro Vision. Since this is a pre-trained model, and we do not do any fine-tuning,
    we perform only validation of this model on PhishOracle-generated dataset. Note
    that the models in Phishpedia aim to identify the brand of a given screenshot
    accurately; once identified, the task of detecting whether the webpage is phishing
    (or not) is straightforward, requiring only a simple comparison of the domain
    name with the brand’s domain name. Since we provide only screenshots to Gemini
    Pro Vision, and brand identification is almost as good as phishing detection,
    we evaluate Gemini Pro Vision on its performance in brand identification.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To carry out the experiment of brand identification on webpage screenshots
    we utilize the Gemini Pro Vision API⁸⁸8[https://aistudio.google.com/app/apikey](https://aistudio.google.com/app/apikey).
    Inputs are given to LLMs via prompts. We design the following prompt for our task
    of interest:'
  prefs: []
  type: TYPE_NORMAL
- en: '<svg id="S4.SS4.SSS3.p4.pic1" class="ltx_picture" height="64.67" overflow="visible"
    version="1.1" width="611.81"><g transform="translate(0,64.67) matrix(1 0 0 -1
    0 0) translate(0,0.69)" fill="#000000" stroke="#000000" stroke-width="0.4pt"><g
    fill-opacity="1.0" transform="matrix(1.0 0.0 0.0 1.0 5.91 8.89)"><foreignobject
    width="600" height="45.51" transform="matrix(1 0 0 -1 0 16.6)" overflow="visible"
    color="#000000">Prompt: Analyse the webpage screenshot to identify its brand name.
    The brand name can be identified based on the text or image on the screenshot.
    If multiple logos are present on the screenshot, identify the prominent one based
    on size, position, and relevance to the overall webpage content.</foreignobject></g></g></svg>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Brand recognition on webpage screenshots: For our evaluations, we consider
    the  legitimate webpage screenshots and $170$ adversarial phishing webpage screenshots
    generated by PhishOracle. The dataset includes a few webpage screenshots containing
    multiple logos belonging to different brands. Figure [4](#S4.F4 "Figure 4 ‣ 4.4.3\.
    Gemini Pro Vision ‣ 4.4\. Validating Phishing Webpage Detection Models ‣ 4\. Performance
    Evaluation ‣ From ML to LLM: Evaluating the Robustness of Phishing Webpage Detection
    Models against Adversarial Attacks") shows a webpage screenshot containing multiple
    logos other than the actual brand logo of TechTarget⁹⁹9[https://www.techtarget.com/](https://www.techtarget.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Refer to caption](img/6fbe68ef544e36500f3c3439830d282f.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4. Webpage Screenshot containing multiple logos of different brands
  prefs: []
  type: TYPE_NORMAL
- en: \Description
  prefs: []
  type: TYPE_NORMAL
- en: Webpage Screenshot containing multiple logos of different brands
  prefs: []
  type: TYPE_NORMAL
- en: 'Model performance: On the logo-brand identification task, the Gemini Pro Vision
    achieves  legitimate webpage screenshots but incorrectly identifies a few of the
    screenshots of adversarial phishing webpages generated by PhishOracle.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Observations: Gemini Pro Vision accurately identifies the brand in  dataset.
    It correctly identifies the actual brand name as ‘TechTarget’ in the webpage screenshot
    shown in Figure [4](#S4.F4 "Figure 4 ‣ 4.4.3\. Gemini Pro Vision ‣ 4.4\. Validating
    Phishing Webpage Detection Models ‣ 4\. Performance Evaluation ‣ From ML to LLM:
    Evaluating the Robustness of Phishing Webpage Detection Models against Adversarial
    Attacks"). Once the brand is correctly identified, phishing detection becomes
    straightforward by comparing the domain name of the URL with the identified brand’s
    domain name. Consequently, Gemini Pro Vision can accurately classify all screenshots
    with correctly identified brands, achieving a precision of .'
  prefs: []
  type: TYPE_NORMAL
- en: Table 5. Performance of Stack Model, Phishpedia and Gemini Pro Vision
  prefs: []
  type: TYPE_NORMAL
- en: '| Model | CleanSet | EvasionSet |'
  prefs: []
  type: TYPE_TB
- en: '| Dataset | Precision | Recall | Dataset | Precision | Recall |'
  prefs: []
  type: TYPE_TB
- en: '| Stack Model ([li2019stacking,](#bib.bib20) ) |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Phishpedia ([lin2021phishpedia,](#bib.bib9) ) | (Phishing ) |  |  | $40\%$
    |'
  prefs: []
  type: TYPE_TB
- en: '| Gemini Pro Vision[7](#footnote7 "footnote 7 ‣ 2.2\. Phishing Webpage Detection
    Approaches ‣ 2\. Related Work and Our Contributions ‣ From ML to LLM: Evaluating
    the Robustness of Phishing Webpage Detection Models against Adversarial Attacks")
    |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: 'Table [5](#S4.T5 "Table 5 ‣ 4.4.3\. Gemini Pro Vision ‣ 4.4\. Validating Phishing
    Webpage Detection Models ‣ 4\. Performance Evaluation ‣ From ML to LLM: Evaluating
    the Robustness of Phishing Webpage Detection Models against Adversarial Attacks")
    provides a comprehensive comparison of the Stack model, Phishpedia and Gemini
    Pro Vision in phishing webpage detection. The  validation dataset is used to evaluate
    the Phishpedia and Gemini Pro Vision models.'
  prefs: []
  type: TYPE_NORMAL
- en: '<svg id="S4.SS4.SSS3.p9.pic1" class="ltx_picture" height="174.55" overflow="visible"
    version="1.1" width="611.81"><g transform="translate(0,174.55) matrix(1 0 0 -1
    0 0) translate(0,0.69)" fill="#000000" stroke="#000000" stroke-width="0.4pt"><g
    fill-opacity="1.0" transform="matrix(1.0 0.0 0.0 1.0 5.91 8.89)"><foreignobject
    width="600" height="155.4" transform="matrix(1 0 0 -1 0 16.6)" overflow="visible"
    color="#000000">Takeaways. i) Stack model ([li2019stacking,](#bib.bib20) ) experiences
    a significant drop in performance when tested on the  at a recall of  validation
    dataset are generated by embedding different logo transformation techniques (refer
    Table [2](#S3.T2 "Table 2 ‣ 3\. Proposed Phishing Webpage Generation Tool: PhishOracle
    ‣ From ML to LLM: Evaluating the Robustness of Phishing Webpage Detection Models
    against Adversarial Attacks")). This results in a precision of  on phishing detection,
    indicating that such transformed logos can evade Phishpedia.'
  prefs: []
  type: TYPE_NORMAL
- en: iii) Gemini Pro Vision accurately achieves the best performance with $95.64\%$
    brand identification accuracy, thereby showing promise for the development of
    future phishing webpage detection solutions.</foreignobject></g></g></svg>
  prefs: []
  type: TYPE_NORMAL
- en: 5\. User study and PhishOracle Web app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we discuss a user study to verify whether the phishing webpages
    generated by PhishOracle truly deceive the actual users. Moreover, we describe
    our PhishOracle web app, which is designed for both user education and phishing
    research purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 5.1\. User Study
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We aim to determine whether adversarial phishing webpages generated by PhishOracle
    can successfully deceive users, even if detection models can be evaded. It is
    necessary to ascertain whether users can readily identify the generated phishing
    webpages based only on their visual appearance. The user study enlisted participants
    from academic and IT backgrounds, and we adhered to ethical guidelines ([finn2007designing,](#bib.bib38)
    ) to safeguard user information confidentiality. A recent work ([draganovic2023users,](#bib.bib39)
    ) conducted a study analyzing whether phishing webpages that evade phishing webpage
    detection models can deceive the users aligning closely with the objective of
    our work. Also, it recommends conducting a short user study by displaying the
    participants with only a few samples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our user study is designed around a specific research question (RQ): Can a
    user classify a webpage as ‘phishing’ or ‘legitimate’ when presented with a screenshot
    with its address bar masked?. To address this RQ, we conduct this study with  phishing
    webpages corresponding to  Google Forms by randomizing the arrangement of legitimate
    and PhishOracle-generated phishing webpage screenshots. Employing Google Forms,
    we administer the user study to the participants. The first nine forms comprise
    a mix of  generated phishing webpage screenshots. One form featured  generated
    phishing webpage screenshots, while another included  generated phishing webpage
    screenshots. The URL field in each webpage screenshot is masked to ensure unbiased
    classification outcomes.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Refer to caption](img/227690feb26ac6511667b951e4f5ae62.png)'
  prefs: []
  type: TYPE_IMG
- en: (a) Legitimate webpage
  prefs: []
  type: TYPE_NORMAL
- en: '![Refer to caption](img/5ae6b91ffecb0be53a7980acdbee9036.png)'
  prefs: []
  type: TYPE_IMG
- en: (b) Generated Phishing webpage
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5. User Study: ([5(a)](#S5.F5.sf1 "In Figure 5 ‣ 5.1\. User Study ‣
    5\. User study and PhishOracle Web app ‣ From ML to LLM: Evaluating the Robustness
    of Phishing Webpage Detection Models against Adversarial Attacks")) Legitimate
    and ([5(b)](#S5.F5.sf2 "In Figure 5 ‣ 5.1\. User Study ‣ 5\. User study and PhishOracle
    Web app ‣ From ML to LLM: Evaluating the Robustness of Phishing Webpage Detection
    Models against Adversarial Attacks")) PhishOracle-generated Webpage Screenshots'
  prefs: []
  type: TYPE_NORMAL
- en: \Description
  prefs: []
  type: TYPE_NORMAL
- en: 'User Study: Legitimate and PhishOracle-generated webpage'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure [5(a)](#S5.F5.sf1 "In Figure 5 ‣ 5.1\. User Study ‣ 5\. User study and
    PhishOracle Web app ‣ From ML to LLM: Evaluating the Robustness of Phishing Webpage
    Detection Models against Adversarial Attacks") and Figure [5(b)](#S5.F5.sf2 "In
    Figure 5 ‣ 5.1\. User Study ‣ 5\. User study and PhishOracle Web app ‣ From ML
    to LLM: Evaluating the Robustness of Phishing Webpage Detection Models against
    Adversarial Attacks") showcase exemplar screenshots of legitimate and PhishOracle-generated
    phishing webpages respectively, employed in the user study. The phishing webpage
    screenshot (Figure [5(b)](#S5.F5.sf2 "In Figure 5 ‣ 5.1\. User Study ‣ 5\. User
    study and PhishOracle Web app ‣ From ML to LLM: Evaluating the Robustness of Phishing
    Webpage Detection Models against Adversarial Attacks")) is generated by incorporating
    V4 visual-based phishing feature into the corresponding legitimate webpage (Figure [5(a)](#S5.F5.sf1
    "In Figure 5 ‣ 5.1\. User Study ‣ 5\. User study and PhishOracle Web app ‣ From
    ML to LLM: Evaluating the Robustness of Phishing Webpage Detection Models against
    Adversarial Attacks")). Evaluating the participants’ feedback reveals that, on
    average, $\approx 48\%$ of the phishing webpages generated by PhishOracle are
    misclassified as legitimate. The user study results are presented in Figure [6](#S5.F6
    "Figure 6 ‣ 5.1\. User Study ‣ 5\. User study and PhishOracle Web app ‣ From ML
    to LLM: Evaluating the Robustness of Phishing Webpage Detection Models against
    Adversarial Attacks"). Our findings from the experiments (refer Section [4.4](#S4.SS4
    "4.4\. Validating Phishing Webpage Detection Models ‣ 4\. Performance Evaluation
    ‣ From ML to LLM: Evaluating the Robustness of Phishing Webpage Detection Models
    against Adversarial Attacks")) and the user study emphasize that the logo transformation
    techniques (such as opacity, rotation, blur, noise, grey-scale mesh) not only
    affect the performance of the phishing webpage detection solutions but also deceive
    the users. This aligns with the work by Ying et al. ([yuan2024adversarial,](#bib.bib40)
    ), who argue that assessing the user’s perception of adversarial phishing webpages
    is a necessary step in phishing webpage detection, as users are the actual targets.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Refer to caption](img/139b892e731a0676560e96dde4c333fb.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6. Results of our User Study
  prefs: []
  type: TYPE_NORMAL
- en: \Description
  prefs: []
  type: TYPE_NORMAL
- en: Results of our User Study
  prefs: []
  type: TYPE_NORMAL
- en: <svg id="S5.SS1.p4.pic1" class="ltx_picture" height="74.93" overflow="visible"
    version="1.1" width="611.81"><g transform="translate(0,74.93) matrix(1 0 0 -1
    0 0) translate(0,0.69)" fill="#000000" stroke="#000000" stroke-width="0.4pt"><g
    fill-opacity="1.0" transform="matrix(1.0 0.0 0.0 1.0 5.91 8.89)"><foreignobject
    width="600" height="55.77" transform="matrix(1 0 0 -1 0 16.6)" overflow="visible"
    color="#000000">Limitations. In our user study, the webpage screenshots do not
    include URLs, which could assist users in assessing the overall legitimacy of
    the webpage. Instead, users are presented with webpage screenshots and tasked
    to classify the webpage as ‘phishing’ or ‘legitimate’ based solely on visual appearance.</foreignobject></g></g></svg>
  prefs: []
  type: TYPE_NORMAL
- en: 5.2\. PhishOracle Web App
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We next introduce our PhishOracle web app, an interactive tool developed to
    serve both user education and phishing research purposes. This web app facilitates
    the process of generating phishing webpages by utilizing a legitimate input URL.
    The web app was initially hosted on PythonAnywhere^(10)^(10)10[https://www.pythonanywhere.com/](https://www.pythonanywhere.com/),
    a cloud-based platform designed for hosting Python web apps, ensuring accessibility
    and reliability. However, the hosted web app was disabled due to a violation of
    the Terms and Conditions of PythonAnywhere as the content is related to phishing.
    We then hosted the web app on GitHub pages^(11)^(11)11[https://pages.github.com/](https://pages.github.com/),
    but the generated phishing webpage was marked “Dangerous” because of the application
    containing phishing activities. The web app is thus added as a repository on GitHub ([PHISHORACLE_WEBAPP_GITHUB_anonymous,](#bib.bib34)
    ) which can be downloaded and hosted on a local system. The web app comprises
    three rendering HTML templates: index.html, select_features.html, and generate_webpage.html.
    The index.html (Figure [7(a)](#S5.F7.sf1 "In Figure 7 ‣ 5.2\. PhishOracle Web
    App ‣ 5\. User study and PhishOracle Web app ‣ From ML to LLM: Evaluating the
    Robustness of Phishing Webpage Detection Models against Adversarial Attacks"))
    serves as the user’s entry point, offering an input text box for legitimate URL
    submission. Once a URL is provided, the application fetches the source code of
    the associated webpage, extracts relevant features, and presents them as checkboxes
    on the select_features.html page (Figure [7(b)](#S5.F7.sf2 "In Figure 7 ‣ 5.2\.
    PhishOracle Web App ‣ 5\. User study and PhishOracle Web app ‣ From ML to LLM:
    Evaluating the Robustness of Phishing Webpage Detection Models against Adversarial
    Attacks")), allowing users to select features to incorporate into the webpage.
    After selecting features, the application embeds the chosen features into the
    legitimate webpage to generate the corresponding phishing webpage, which can be
    viewed on the generate_webpage.html page (Figure [7(c)](#S5.F7.sf3 "In Figure
    7 ‣ 5.2\. PhishOracle Web App ‣ 5\. User study and PhishOracle Web app ‣ From
    ML to LLM: Evaluating the Robustness of Phishing Webpage Detection Models against
    Adversarial Attacks")). Users can open the generated phishing webpage (Figure [7(d)](#S5.F7.sf4
    "In Figure 7 ‣ 5.2\. PhishOracle Web App ‣ 5\. User study and PhishOracle Web
    app ‣ From ML to LLM: Evaluating the Robustness of Phishing Webpage Detection
    Models against Adversarial Attacks")) in a new browser tab with a single click.
    PhishOracle web app streamlines the process of generating phishing webpages for
    research and testing, offering a user-friendly interface for feature selection
    and webpage generation.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Refer to caption](img/c08d75c2d0e0e6eb538af1bfc9e16380.png)'
  prefs: []
  type: TYPE_IMG
- en: (a) Index Page
  prefs: []
  type: TYPE_NORMAL
- en: '![Refer to caption](img/5f49f2e19b211a5228d93e3c1700af90.png)'
  prefs: []
  type: TYPE_IMG
- en: (b) Feature Selection Page
  prefs: []
  type: TYPE_NORMAL
- en: '![Refer to caption](img/47bd2254be8e047a87138a999dc9a0f1.png)'
  prefs: []
  type: TYPE_IMG
- en: (c) Generate Page
  prefs: []
  type: TYPE_NORMAL
- en: '![Refer to caption](img/7483fab0828ba64bbc2f0a7ba63eeef2.png)'
  prefs: []
  type: TYPE_IMG
- en: (d) Phishing Webpage
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7. Generating Phishing Webpage via PhishOracle Web App
  prefs: []
  type: TYPE_NORMAL
- en: \Description
  prefs: []
  type: TYPE_NORMAL
- en: Generating Phishing Webpage via PhishOracle Web App
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this paper, we developed PhishOracle to generate adversarial phishing webpages
    by embedding randomly selected content-based and visual-based phishing features
    in legitimate webpages. The PhishOracle-generated phishing webpages are used to
    evaluate the robustness of the Stack model, Phishpedia and Gemini Pro Vision.
    The Stack model exhibits reduced performance in classifying PhishOracle-generated
    phishing webpages. Similarly, Phishpedia shows low accuracy in correctly identifying
    brand logos on screenshots of PhishOracle-generated adversarial phishing webpages,
    which incorporate different logo transformation techniques. In contrast, Gemini Pro Vision
    is robust to the attack and surpasses Phishpedia in brand identification by accurately
    identifying the target brands in  of the PhishOracle-generated adversarial phishing
    webpages are misclassified as legitimate, by the participants. The datasets, PhishOracle
    code and web app are available on our GitHub repositories ([PHISHORACLE_GITHUB_anonymous,](#bib.bib33)
    ; [PHISHORACLE_WEBAPP_GITHUB_anonymous,](#bib.bib34) ). PhishOracle web app empowers
    users to clone and host it locally, enabling them to input a legitimate URL, choose
    specific phishing features, and generate corresponding phishing webpages.
  prefs: []
  type: TYPE_NORMAL
- en: The visual-based features in our tool add opacity to the logos and utilize transformation
    techniques such as rotation, blurring, adding grey-colored mesh, and noise on
    logos within a webpage. In our future work, we plan to add a few more techniques
    to generate adversarial logos and incorporate them as a feature in PhishOracle
    tool.
  prefs: []
  type: TYPE_NORMAL
- en: Ethical Statement. Our institutions do not require any formal IRB approval to
    carry out the research discussed here. Adhering to the principles outlined in
    the Menlo report ([bailey2012menlo,](#bib.bib41) ), our user study is conducted
    with strict adherence to ethical guidelines, ensuring the non-forging and intentional
    avoidance of collecting sensitive information from participants. The study involved
    participants selecting an option (‘Phishing’ or ‘Legitimate’) based on the visual
    appearance of webpage screenshots. Although we have publicly released the source
    code of PhishOracle tool on GitHub repositories ([PHISHORACLE_GITHUB_anonymous,](#bib.bib33)
    ; [PHISHORACLE_WEBAPP_GITHUB_anonymous,](#bib.bib34) ), the code will be used
    solely for educational purposes and not for any illegal or unethical activities.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[1] APWG. Phishing Activity Trends Report, 2024. Available on: [https://docs.apwg.org/reports/apwg_trends_report_q1_2024.pdf](https://docs.apwg.org/reports/apwg_trends_report_q1_2024.pdf)
    [Accessed: July 3rd, 2024].'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2] Hossein Shirazi, Bruhadeshwar Bezawada, and Indrakshi Ray. “Kn0w Thy Doma1n
    Name”: Unbiased Phishing Detection Using Domain Name Based Features. In Proceedings
    of the 23nd ACM on symposium on access control models and technologies, 2018.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3] Ankit Kumar Jain and Brij B Gupta. PHISH-SAFE: URL Features-Based Phishing
    Detection System Using Machine Learning. In Cyber Security: Proceedings of CSI
    2015, pages 467–474. Springer, 2018.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4] Amirreza Niakanlahiji, Bei-Tseng Chu, and Ehab Al-Shaer. PhishMon: A Machine
    Learning Framework for Detecting Phishing Webpages. In 2018 IEEE International
    Conference on Intelligence and Security Informatics (ISI), pages 220–225\. IEEE,
    2018.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5] Routhu Srinivasa Rao, Tatti Vaishnavi, and Alwyn Roshan Pais. CatchPhish:
    Detection of Phishing Websites by Inspecting URLs. Journal of Ambient Intelligence
    and Humanized Computing, 11(2):813–825, 2020.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6] Anthony Y Fu, Liu Wenyin, and Xiaotie Deng. Detecting Phishing Web Pages
    with Visual Similarity Assessment Based on Earth Mover’s Distance (EMD). IEEE
    transactions on dependable and secure computing, 3(4):301–311, 2006.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7] Sadia Afroz and Rachel Greenstadt. Phishzoo: Detecting phishing websites
    by looking at them. In 2011 IEEE fifth international conference on semantic computing,
    pages 368–375\. IEEE, 2011.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[8] Sahar Abdelnabi, Katharina Krombholz, and Mario Fritz. VisualPhishNet:
    Zero-Day Phishing Website Detection by Visual Similarity. In Proceedings of the
    2020 ACM SIGSAC conference on Computer and Communications Security, pages 1681–1698,
    Association for Computing Machinery, 2020\. ACM New York, NY.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[9] Yun Lin, Ruofan Liu, Dinil Mon Divakaran, Jun Yang Ng, Qing Zhou Chan,
    Yiwen Lu, Yuxuan Si, Fan Zhang, and Jin Song Dong. Phishpedia: A hybrid deep learning
    based approach to visually identify phishing webpages. In 30th USENIX Security
    Symposium, 2021.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[10] Ruofan Liu, Yun Lin, Xianglin Yang, Siang Hwee Ng, Dinil Mon Divakaran,
    and Jin Song Dong. Inferring phishing intention via webpage appearance and dynamics:
    A deep vision based approach. In 31st USENIX Security Symposium (USENIX Security
    22), 2022.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[11] Takashi Koide, Naoki Fukushi, Hiroki Nakano, and Daiki Chiba. Detecting
    Phishing Sites Using ChatGPT. arXiv preprint arXiv:2306.05816, 2023.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[12] Giovanni Apruzzese and VS Subrahmanian. Mitigating Adversarial Gray-Box
    Attacks Against Phishing Detectors. IEEE Transactions on Dependable and Secure
    Computing, 20(5):3753–3769, 2022.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[13] Giovanni Apruzzese, Hyrum S Anderson, Savino Dambra, David Freeman, Fabio
    Pierazzi, and Kevin Roundy. “Real Attackers Don’t Compute Gradients”: Bridging
    the Gap Between Adversarial ML Research and Practice. In 2023 IEEE Conference
    on Secure and Trustworthy Machine Learning (SaTML), pages 339–364\. IEEE, 2023.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[14] Jehyun Lee, Zhe Xin, Melanie Ng Pei See, Kanav Sabharwal, Giovanni Apruzzese,
    and Dinil Mon Divakaran. Attacking logo-based phishing website detectors with
    adversarial perturbations. In European Symposium on Research in Computer Security,
    pages 162–182\. Springer, 2023.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[15] Fabien Charmet, Tomohiro Morikawa, Akira Tanaka, and Takeshi Takahashi.
    VORTEX: Visual phishing detectiOns aRe Through EXplanations. ACM Transactions
    on Internet Technology, 24(2):1–24, 2024.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[16] Erickson Hyppolite Poel. BlackEye. [https://github.com/EricksonAtHome/blackeye](https://github.com/EricksonAtHome/blackeye)
    [Accessed: July 1st, 2024].'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[17] Tahmid Rayat. ZPhisher: Automated Phishing Tool, 2023. [https://github.com/htr-tech/zphisher](https://github.com/htr-tech/zphisher)
    [Accessed: April 10th, 2023].'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[18] Abir Hasan. ShellPhish. [https://github.com/AbirHasan2005/ShellPhish](https://github.com/AbirHasan2005/ShellPhish)
    [Accessed: July 1st, 2024].'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[19] Victor Le Pochat, Tom Van Goethem, Samaneh Tajalizadehkhoob, Maciej Korczyński,
    and Wouter Joosen. Tranco: A Research-Oriented Top Sites Ranking Hardened Against
    Manipulation. In Proceedings of the 26th Annual Network and Distributed System
    Security Symposium, NDSS, 2019.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[20] Yukun Li, Zhenguo Yang, Xu Chen, Huaping Yuan, and Wenyin Liu. A Stacking
    Model using URL and HTML Features for Phishing Webpage Detection. Future Generation
    Computer Systems, Elsevier, 94:27–39, 2019.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[21] Google. Word2Vec, 2013. [https://code.google.com/archive/p/word2vec/](https://code.google.com/archive/p/word2vec/)
    [Accessed: June 23th, 2024].'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[22] Yue Zhang, Jason I Hong, and Lorrie F Cranor. Cantina: a content-based
    approach to detecting phishing web sites. In Proceedings of the 16th international
    conference on World Wide Web, pages 639–648, 2007.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[23] Gaurav Varshney, Manoj Misra, and Pradeep K Atrey. A phish detector using
    lightweight search features. Computers & Security, 62:213–228, 2016.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[24] Rakesh Verma and Keith Dyer. On the Character of Phishing URLs: Accurate
    and Robust Statistical Learning Classifiers. In Proceedings of the 5th ACM Conference
    on Data and Application Security and Privacy, 2015.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[25] Shaoqing Ren, Kaiming He, Ross Girshick, and Jian Sun. Faster R-CNN: Towards
    Real-Time Object Detection with Region Proposal Networks. Advances in neural information
    processing systems, 2015.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[26] Yuxin Wu, Alexander Kirillov, Francisco Massa, Wan-Yen Lo, and Ross Girshick.
    Detectron2, 2019. [https://github.com/facebookresearch/detectron2](https://github.com/facebookresearch/detectron2).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[27] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Identity mappings
    in deep residual networks. In Computer Vision–ECCV 2016: 14th European Conference,
    Amsterdam, The Netherlands, October 11–14, 2016, Proceedings, Part IV 14, pages
    630–645\. Springer, 2016.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[28] Jing Wang, Weiqing Min, Sujuan Hou, Shengnan Ma, Yuanjie Zheng, Haishuai
    Wang, and Shuqiang Jiang. Logo-2K+: A Large-Scale Logo Dataset for Scalable Logo
    Classification. In Proceedings of the AAAI Conference on Artificial Intelligence,
    pages 6194–6201, 2020.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[29] Jiawei Han, Micheline Kamber, and Jian Pei. Getting to Know Your Data.
    In Data mining, pages 39–82\. Elsevier, 2012.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[30] Ahmet Selman Bozkir and Murat Aydos. LogoSENSE: A companion HOG based
    logo detection scheme for phishing web page and E-mail brand recognition. Computers
    & Security, 95:101855, 2020.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[31] Bushra Sabir, M Ali Babar, Raj Gaire, and Alsharif Abuadbba. Reliability
    and Robustness analysis of Machine Learning based Phishing URL Detectors. IEEE
    Transactions on Dependable and Secure Computing, 2022.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[32] Dinil Mon Divakaran and Adam Oest. Phishing Detection Leveraging Machine
    Learning and Deep Learning: A Review. IEEE Security & Privacy, 20(5):86–95, 2022.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[33] GitHub link is not disclosed here due to double-blind review policy; it
    will be shared in final version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[34] GitHub link is not disclosed here due to double-blind review policy; it
    will be shared in final version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[35] Yun Lin and Ruofan Liu. Phishpedia, 2023. Available on: [https://github.com/lindsey98/Phishpedia](https://github.com/lindsey98/Phishpedia)
    [Accessed: December 23rd, 2023].'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[36] Jehyun Lee, Pingxiao Ye, Ruofan Liu, Dinil Mon Divakaran, and Mun Choon
    Chan. Building Robust Phishing Detection System: an Empirical Analysis. NDSS MADWeb,
    2020.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[37] Paul Henderson and Vittorio Ferrari. End-to-end training of object class
    detectors for mean average precision. In Computer Vision–ACCV: 13th Asian Conference
    on Computer Vision, Springer, pages 198–213, 2017.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[38] Peter Finn and Markus Jakobsson. Designing Ethical Phishing Experiments.
    IEEE Technology and Society Magazine, 26(1):46–58, 2007.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[39] Ajka Draganovic, Savino Dambra, Javier Aldana Iuit, Kevin Roundy, and
    Giovanni Apruzzese. “Do Users fall for Real Adversarial Phishing?” Investigating
    the Human response to Evasive Webpages. arXiv preprint arXiv:2311.16383, 2023.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[40] Ying Yuan, Qingying Hao, Giovanni Apruzzese, Mauro Conti, and Gang Wang.
    “Are Adversarial Phishing Webpages a Threat in Reality?” Understanding the Users’
    Perception of Adversarial Webpages. In Proceedings of the ACM on Web Conference
    2024, pages 1712–1723, 2024.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[41] Michael Bailey, David Dittrich, Erin Kenneally, and Doug Maughan. The
    Menlo Report. IEEE Security & Privacy, 10(2):71–75, 2012.</foreignobject></g></g></g></svg>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
