- en: 沃顿商学院《AI For Business（AI用于商业：AI基础／市场营销+财务／人力／管理）》（中英字幕） - P16：15_深度学习的工作原理.zh_en
    - GPT中英字幕课程资源 - BV1Ju4y157dK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How does deep learning work？
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec4748e43c5bba94cec13768f4df0f25_1.png)'
  prefs: []
  type: TYPE_IMG
- en: So we've talked about the notion that we can take raw unstructured data and
    we can directly。
  prefs: []
  type: TYPE_NORMAL
- en: start to make predictions using deep learning。 We don't have to go through this
    feature engineering step。
  prefs: []
  type: TYPE_NORMAL
- en: We don't have to convert it to columns or individual variables or features that
    can be。
  prefs: []
  type: TYPE_NORMAL
- en: used for prediction。 Unstructured data， we can start with its raw digital representation。
  prefs: []
  type: TYPE_NORMAL
- en: The first thing is that any unstructured data we're talking about text， sound，
    images， they。
  prefs: []
  type: TYPE_NORMAL
- en: can always be represented in some digital form。 So it might be a spectrogram
    if it's audio。
  prefs: []
  type: TYPE_NORMAL
- en: It's an image data can be represented by pixels。 A set of text can be represented
    by vectors of words and so all of these different types。
  prefs: []
  type: TYPE_NORMAL
- en: of data can be represented in some kind of raw native digital format。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec4748e43c5bba94cec13768f4df0f25_3.png)'
  prefs: []
  type: TYPE_IMG
- en: The data are then pre-processed in some way to make it standardized for the
    prediction， task。
  prefs: []
  type: TYPE_NORMAL
- en: Once the data is standardized， it's then passed into something called a neural
    network。
  prefs: []
  type: TYPE_NORMAL
- en: The reason we call this a neural network is that people have found that this
    is modeled。
  prefs: []
  type: TYPE_NORMAL
- en: essentially after a neuron。 So a neuron in the brain takes in a number of inputs
    and then depending on the value of。
  prefs: []
  type: TYPE_NORMAL
- en: those inputs it decides whether to fire or not。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec4748e43c5bba94cec13768f4df0f25_5.png)'
  prefs: []
  type: TYPE_IMG
- en: Very similarly a neural network in deep learning works very similarly in some
    way。
  prefs: []
  type: TYPE_NORMAL
- en: So a neural network that forms the basis of deep learning， the data， this raw
    native data。
  prefs: []
  type: TYPE_NORMAL
- en: that we were talking about forms the input layer， it comes into the neural network。
  prefs: []
  type: TYPE_NORMAL
- en: And just like a neuron， neural networks basically are looking at the data that
    are coming in。
  prefs: []
  type: TYPE_NORMAL
- en: and then depending on the value of that data， it's deciding whether or not to
    fire its output。
  prefs: []
  type: TYPE_NORMAL
- en: or set its output at a certain level。 So you can imagine a neural network as
    a series of decision points or nodes or neurons and。
  prefs: []
  type: TYPE_NORMAL
- en: the input data are coming in one side。 The neural network is composed of a series
    of layers that are just looking at sort of。
  prefs: []
  type: TYPE_NORMAL
- en: all different combinations of the input data。 So rather than the input data
    having to be converted into features。
  prefs: []
  type: TYPE_NORMAL
- en: the layers in a neural， network are basically automatically trying to figure
    out what it is about the raw unstructured。
  prefs: []
  type: TYPE_NORMAL
- en: data that can be combined and recombined to form the most effective features
    for prediction。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec4748e43c5bba94cec13768f4df0f25_7.png)'
  prefs: []
  type: TYPE_IMG
- en: the most effective combinations for predictions。 So the way this happens is
    that engineers choose a loss function or a cost function to。
  prefs: []
  type: TYPE_NORMAL
- en: compare against the training labels。 That's just a way of saying how close are
    we to predicting the right answers。
  prefs: []
  type: TYPE_NORMAL
- en: So you have training data in this case， this is data where you know the right
    answers。
  prefs: []
  type: TYPE_NORMAL
- en: So let's go back to our medical diagnostic image examples。
  prefs: []
  type: TYPE_NORMAL
- en: So imagine you have a lot of data on images of people's medical images and you
    have data。
  prefs: []
  type: TYPE_NORMAL
- en: on the right answers， which might mean you have data on whether or not the person
    or。
  prefs: []
  type: TYPE_NORMAL
- en: the patient actually had the condition as determined by a doctor。 So you have
    the medical data。
  prefs: []
  type: TYPE_NORMAL
- en: the medical images and whether or not the person actually， had the condition
    or not。
  prefs: []
  type: TYPE_NORMAL
- en: So the neural network is going to try to do is take in this image data， the
    neural， the。
  prefs: []
  type: TYPE_NORMAL
- en: layers in the neural network itself are going to try to find the right combinations
    of that。
  prefs: []
  type: TYPE_NORMAL
- en: raw pixel data to make a prediction。 That prediction is going to be whether
    or not the person had the condition。
  prefs: []
  type: TYPE_NORMAL
- en: Since we already know the right answer from the training data， we can start
    to compare。
  prefs: []
  type: TYPE_NORMAL
- en: how often do we make the right decision and how often is it wrong。
  prefs: []
  type: TYPE_NORMAL
- en: And this is that loss function or a cost function。
  prefs: []
  type: TYPE_NORMAL
- en: This is telling us how far we are from the truth as represented by the data
    we have to。
  prefs: []
  type: TYPE_NORMAL
- en: train the model。 And so what a neural network is going to do then is start to
    go back and forth。
  prefs: []
  type: TYPE_NORMAL
- en: arranging， the values on the nodes， the weights into the nodes and so on。
  prefs: []
  type: TYPE_NORMAL
- en: The different parts of the neural network is going to start to rearrange itself
    until it。
  prefs: []
  type: TYPE_NORMAL
- en: gets to a point where the raw input data are getting combined， weighted and
    passed on to。
  prefs: []
  type: TYPE_NORMAL
- en: the prediction layer with a minimum of error。 Basically it's going to rearrange
    itself to the point that the predictions it's making。
  prefs: []
  type: TYPE_NORMAL
- en: are as close as possible to what the truth is as represented in the training
    data that。
  prefs: []
  type: TYPE_NORMAL
- en: has been given to learn。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec4748e43c5bba94cec13768f4df0f25_9.png)'
  prefs: []
  type: TYPE_IMG
- en: Some of the terms you might hear with reference to neural networks are back
    propagation。
  prefs: []
  type: TYPE_NORMAL
- en: Back propagation is the process by which the network is tuned。
  prefs: []
  type: TYPE_NORMAL
- en: So networks should call it feed forward networks back propagation。
  prefs: []
  type: TYPE_NORMAL
- en: These are terms that refer to the data get passed forward and then different
    types of。
  prefs: []
  type: TYPE_NORMAL
- en: information get passed forward and back in the network so that the network can
    kind of。
  prefs: []
  type: TYPE_NORMAL
- en: learn from the data how to configure itself in a way that's optimal for making
    a prediction。
  prefs: []
  type: TYPE_NORMAL
- en: So back propagation is part of that process。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec4748e43c5bba94cec13768f4df0f25_11.png)'
  prefs: []
  type: TYPE_IMG
- en: The great thing about deep learning or these kind of neural network context
    is that there。
  prefs: []
  type: TYPE_NORMAL
- en: is very limited domain information embedded in the model。
  prefs: []
  type: TYPE_NORMAL
- en: So you're substituting computation for expert knowledge。
  prefs: []
  type: TYPE_NORMAL
- en: What I mean by that is in this deep learning case what we've done is taken the
    medical。
  prefs: []
  type: TYPE_NORMAL
- en: diagnostic image， passed it into the deep learning engine and it's going to
    learn how to predict。
  prefs: []
  type: TYPE_NORMAL
- en: whether or not a patient has a condition or not。 With shallow learning with
    the feature engineering steps we had talked about before there was。
  prefs: []
  type: TYPE_NORMAL
- en: a step where somebody would have to take the image and then look at how to select
    and hand。
  prefs: []
  type: TYPE_NORMAL
- en: code individual features from those images。 Again that's a very time consuming
    and difficult process。
  prefs: []
  type: TYPE_NORMAL
- en: This deep learning approach requires much less domain information。
  prefs: []
  type: TYPE_NORMAL
- en: It does require however a good deal of computation。
  prefs: []
  type: TYPE_NORMAL
- en: It's great though but for this reason for tasks with a lack of domain understanding
    for feature。
  prefs: []
  type: TYPE_NORMAL
- en: extraction。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec4748e43c5bba94cec13768f4df0f25_13.png)'
  prefs: []
  type: TYPE_IMG
- en: So when you're hand coding features where you might have needed a developer
    as well as。
  prefs: []
  type: TYPE_NORMAL
- en: somebody who has significant medical expertise with a deep learning approach，
    a deep learning。
  prefs: []
  type: TYPE_NORMAL
- en: or machine learning engineer with a lot of solid data on medical images and
    the predictions。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec4748e43c5bba94cec13768f4df0f25_15.png)'
  prefs: []
  type: TYPE_IMG
- en: that were ultimately made on those images can themselves create a deep learning
    engine。
  prefs: []
  type: TYPE_NORMAL
- en: or deep learning engine that can do the prediction task effectively。
  prefs: []
  type: TYPE_NORMAL
- en: One question that comes up is what is the role of the engineer。
  prefs: []
  type: TYPE_NORMAL
- en: In the prior case with feature engineering the engineer was important to be
    able to pull。
  prefs: []
  type: TYPE_NORMAL
- en: out individual pieces of information。 So again back to the image example。
  prefs: []
  type: TYPE_NORMAL
- en: An engineer was important to take a raw image and then perhaps pull out features
    like say。
  prefs: []
  type: TYPE_NORMAL
- en: capillary width or something like color shade that requires image processing
    which requires。
  prefs: []
  type: TYPE_NORMAL
- en: some technical expertise。 Here you don't have that feature engineering anymore
    so what is the role of the engineer？
  prefs: []
  type: TYPE_NORMAL
- en: You have raw data being put into the neural network。 So what does the engineer
    do？
  prefs: []
  type: TYPE_NORMAL
- en: Well it turns out there's still a number of things that have to be set for a
    deep learning。
  prefs: []
  type: TYPE_NORMAL
- en: approach。 These are called hyperparameter values that require engineering knowledge
    but generally。
  prefs: []
  type: TYPE_NORMAL
- en: less domain knowledge。 These have names like epochs， batch size， learning rate，
    regularization。
  prefs: []
  type: TYPE_NORMAL
- en: activation functions， the number of hidden layers themselves。
  prefs: []
  type: TYPE_NORMAL
- en: There's a variety of things that engineers have to decide how to set for the
    network to。
  prefs: []
  type: TYPE_NORMAL
- en: perform well。 These hyperparameter values have to be managed by the engineer
    but the workflow ultimately。
  prefs: []
  type: TYPE_NORMAL
- en: changes。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec4748e43c5bba94cec13768f4df0f25_17.png)'
  prefs: []
  type: TYPE_IMG
- en: So again instead of having feature extraction be an important approach so without
    deep learning。
  prefs: []
  type: TYPE_NORMAL
- en: we have a workflow where we have input data like image data and then we have
    a time consuming。
  prefs: []
  type: TYPE_NORMAL
- en: process which is pulling out individual columnar variable or features from those
    kinds of data。
  prefs: []
  type: TYPE_NORMAL
- en: which are then put into a classification or prediction step and then finally
    you get， the output。
  prefs: []
  type: TYPE_NORMAL
- en: In a deep learning approach you don't have that feature extraction step。
  prefs: []
  type: TYPE_NORMAL
- en: You can just start with the raw unstructured data that is well labeled， put
    that into the。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec4748e43c5bba94cec13768f4df0f25_19.png)'
  prefs: []
  type: TYPE_IMG
- en: deep learning engine and you get your predictions without having to do any of
    that feature engineering。
  prefs: []
  type: TYPE_NORMAL
- en: that's again expensive and uncertain。 Thank you。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec4748e43c5bba94cec13768f4df0f25_21.png)'
  prefs: []
  type: TYPE_IMG
