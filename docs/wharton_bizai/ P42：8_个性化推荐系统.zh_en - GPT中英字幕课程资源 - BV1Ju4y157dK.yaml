- en: 沃顿商学院《AI For Business（AI用于商业：AI基础／市场营销+财务／人力／管理）》（中英字幕） - P42：8_个性化推荐系统.zh_en
    - GPT中英字幕课程资源 - BV1Ju4y157dK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this lecture， we will start with an introduction to personalization on the
    web。
  prefs: []
  type: TYPE_NORMAL
- en: and I'll specifically。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8d0f308785593bbb33cd81d4af65190_1.png)'
  prefs: []
  type: TYPE_IMG
- en: dive into recommender systems。 Now recommender systems。
  prefs: []
  type: TYPE_NORMAL
- en: also sometimes referred to as recommendation systems， are systems。
  prefs: []
  type: TYPE_NORMAL
- en: that attempt to predict what items or product or content are of interest to
    a consumer or。
  prefs: []
  type: TYPE_NORMAL
- en: a customer based on some information about the customer， such as their user
    profile or。
  prefs: []
  type: TYPE_NORMAL
- en: their past purchases or their ratings。 The most common example of a recommender
    system is what is known as a collaborative filter。
  prefs: []
  type: TYPE_NORMAL
- en: It is a system that recommends using taglines or phrases such as customers who
    bought this。
  prefs: []
  type: TYPE_NORMAL
- en: also bought this or customers who viewed this product also viewed that product
    or people。
  prefs: []
  type: TYPE_NORMAL
- en: like you bought these other products。 Now these kinds of recommendation systems
    are unique because they add value to both customers。
  prefs: []
  type: TYPE_NORMAL
- en: and to firms。 For consumers， they help them learn about new products and they
    help them sort through。
  prefs: []
  type: TYPE_NORMAL
- en: large choices， meaning when you have lots of choices， they help them identify
    the most。
  prefs: []
  type: TYPE_NORMAL
- en: relevant choices。 And for firms， they help in converting browsers to buyers。
  prefs: []
  type: TYPE_NORMAL
- en: they help in cross-selling products， and they help increase loyalty by providing
    a customized or personalized browsing experience。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8d0f308785593bbb33cd81d4af65190_3.png)'
  prefs: []
  type: TYPE_IMG
- en: Now there are many examples of this。 You are used to a message such as people
    who bought this product also bought these other。
  prefs: []
  type: TYPE_NORMAL
- en: products or on Google News， you might be used to seeing personalized news recommendations。
  prefs: []
  type: TYPE_NORMAL
- en: or on YouTube or Netflix， you might be used to seeing personalized video and
    movie recommendations。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8d0f308785593bbb33cd81d4af65190_5.png)'
  prefs: []
  type: TYPE_IMG
- en: as well。 Now if you look at the designs of these systems at a high level。
  prefs: []
  type: TYPE_NORMAL
- en: there are two main types of， designs that are used in the industry。
  prefs: []
  type: TYPE_NORMAL
- en: The first is what are known as content based recommenders and these are systems
    that attempt。
  prefs: []
  type: TYPE_NORMAL
- en: to find other products of interest to consumers based on some information about
    product attributes。
  prefs: []
  type: TYPE_NORMAL
- en: So for example， if you like a product， these systems look at the attributes
    of these products。
  prefs: []
  type: TYPE_NORMAL
- en: that you like and they find other products of a similar nature。
  prefs: []
  type: TYPE_NORMAL
- en: An example of that is Pandora's music recommendation system。
  prefs: []
  type: TYPE_NORMAL
- en: The other design is what is known as a collaborative filter。
  prefs: []
  type: TYPE_NORMAL
- en: A collaborative filter doesn't actually go deep into the product attributes。
    Instead。
  prefs: []
  type: TYPE_NORMAL
- en: collaborative filters recommend items based on others on what others are consuming。
  prefs: []
  type: TYPE_NORMAL
- en: So they try and find other people who have similar tastes and they recommend
    what else。
  prefs: []
  type: TYPE_NORMAL
- en: they might like。 So for example， people who bought this also bought this。
  prefs: []
  type: TYPE_NORMAL
- en: So let's dive into both of these examples and look at them in greater detail。
    So first。
  prefs: []
  type: TYPE_NORMAL
- en: content based recommenders。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8d0f308785593bbb33cd81d4af65190_7.png)'
  prefs: []
  type: TYPE_IMG
- en: As I mentioned， they tend to focus on content attributes or product attributes
    and they。
  prefs: []
  type: TYPE_NORMAL
- en: tend to find other products with similar attributes。
  prefs: []
  type: TYPE_NORMAL
- en: So an example of that is Pandora which is a music service， online music service。
  prefs: []
  type: TYPE_NORMAL
- en: And Pandora essentially recommends and plays songs that are likely to be of
    interest to， consumers。
  prefs: []
  type: TYPE_NORMAL
- en: Pandora emerged from a project that was known as the music genome project。
  prefs: []
  type: TYPE_NORMAL
- en: Essentially in this project， many artists， hundreds or perhaps even thousands
    of artists。
  prefs: []
  type: TYPE_NORMAL
- en: listened to millions of songs and rated these songs along multiple dimensions
    or attributes。
  prefs: []
  type: TYPE_NORMAL
- en: So for example， you might say that a particular song is getting a high score
    in terms of electronic。
  prefs: []
  type: TYPE_NORMAL
- en: influence but it might have a low score in terms of how rhythmic the song is，
    also known。
  prefs: []
  type: TYPE_NORMAL
- en: as the rhythmic syncopation。 Or it might actually get a low score in terms of
    major key tonality。
  prefs: []
  type: TYPE_NORMAL
- en: These are different musical qualities of a song。 A different song might get
    a high score in terms of rhythmic syncopation but might get a low。
  prefs: []
  type: TYPE_NORMAL
- en: score in terms of electronic influence but get a high score in terms of major
    key tonality。
  prefs: []
  type: TYPE_NORMAL
- en: and so on。 And in this example， I just mentioned three different musical attributes
    or musical qualities。
  prefs: []
  type: TYPE_NORMAL
- en: of a song which is electronic influence， rhythmic syncopation and major key
    tonality。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8d0f308785593bbb33cd81d4af65190_9.png)'
  prefs: []
  type: TYPE_IMG
- en: But in practice， Pandora has over 150 different attributes for any given song。
  prefs: []
  type: TYPE_NORMAL
- en: And given these attributes and given a database of a large set of songs and
    with very deep。
  prefs: []
  type: TYPE_NORMAL
- en: information on the musical qualities of each song， the goal of Pandora is to
    now start recommending。
  prefs: []
  type: TYPE_NORMAL
- en: songs。 The way that works on Pandora is a user comes in and starts by indicating
    that there's some。
  prefs: []
  type: TYPE_NORMAL
- en: song that they like。 For example， I might log in to Pandora and indicate that
    I like the song Thunder by Imagine。
  prefs: []
  type: TYPE_NORMAL
- en: Dragons。 Now Pandora looks into its database and finds other songs with similar
    musical qualities。
  prefs: []
  type: TYPE_NORMAL
- en: And then it recommends those songs。 For example， when I logged into Pandora
    and indicated that I like Thunder by Imagine Dragons。
  prefs: []
  type: TYPE_NORMAL
- en: Pandora next played a ride by 21 pilots and it specifically said that it recommended
    the。
  prefs: []
  type: TYPE_NORMAL
- en: song because it has a dub production， it has a reggae feel， it has an acoustic
    rhythm piano。
  prefs: []
  type: TYPE_NORMAL
- en: it uses a string ensemble and it has major key tonality。
  prefs: []
  type: TYPE_NORMAL
- en: These are the attributes of the song Thunder by Imagine Dragons that it also
    found in ride。
  prefs: []
  type: TYPE_NORMAL
- en: by 21 pilots。 Now as you can see， this is based on deep knowledge about the
    product or the content being recommended。
  prefs: []
  type: TYPE_NORMAL
- en: and this design can only be used when you have a lot of metadata about music
    or products。
  prefs: []
  type: TYPE_NORMAL
- en: in general。 And these systems can adapt so for example if I listen to a song
    and give it a thumbs down。
  prefs: []
  type: TYPE_NORMAL
- en: in other words indicate to Pandora that I do not like that song， then Pandora
    can incorporate。
  prefs: []
  type: TYPE_NORMAL
- en: that feedback and learn and this is where learning comes in and adjust on the
    fly and。
  prefs: []
  type: TYPE_NORMAL
- en: show us different songs that are closer to our preferences and that are different
    from。
  prefs: []
  type: TYPE_NORMAL
- en: the songs we dislike。 And so this is a key portion of the learning that is built
    into these algorithms。
  prefs: []
  type: TYPE_NORMAL
- en: The other design that is different from the content based design is the collaborative
    filter。
  prefs: []
  type: TYPE_NORMAL
- en: The collaborative filtering does not require very deep knowledge of the products
    being。
  prefs: []
  type: TYPE_NORMAL
- en: recommended so they don't require attributes of songs or other products。
  prefs: []
  type: TYPE_NORMAL
- en: Instead they are based on information on what other people are consuming。
  prefs: []
  type: TYPE_NORMAL
- en: So for example Amazon's people who bought this also bought that is based on
    collaborative。
  prefs: []
  type: TYPE_NORMAL
- en: filtering。 In fact when Netflix originally launched its streaming service initially
    the design was。
  prefs: []
  type: TYPE_NORMAL
- en: based on collaborative filtering。 It essentially grouped users into different
    personas based on their ratings and viewing。
  prefs: []
  type: TYPE_NORMAL
- en: patterns and then made suggestions or recommendations to people based on what
    other people like essentially。
  prefs: []
  type: TYPE_NORMAL
- en: what other people with similar persona like。 Now last。
  prefs: []
  type: TYPE_NORMAL
- en: fm is a music service on online music service that users collaborative filtering。
  prefs: []
  type: TYPE_NORMAL
- en: to make recommendations。 The way this would work is that if I go to last。
  prefs: []
  type: TYPE_NORMAL
- en: fm and indicate that I like Thunder by， Imagine Dragons。 Now last。
  prefs: []
  type: TYPE_NORMAL
- en: fm does not necessarily have deep knowledge of the musical qualities of Thunder。
  prefs: []
  type: TYPE_NORMAL
- en: Instead it would look at what other users have like the song Thunder and once
    it identifies。
  prefs: []
  type: TYPE_NORMAL
- en: other such users it looks at what other songs these users have liked and it
    recommends their。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8d0f308785593bbb33cd81d4af65190_11.png)'
  prefs: []
  type: TYPE_IMG
- en: songs。 So these are the two main designs within collaborative filtering there
    are many variations of that。
  prefs: []
  type: TYPE_NORMAL
- en: design。 So for example there is a design known as an item to item collaborative
    filter and essentially。
  prefs: []
  type: TYPE_NORMAL
- en: this design recommends songs to users based on what others are consuming but
    the input。
  prefs: []
  type: TYPE_NORMAL
- en: to this design is a specific item that you have indicated that you like。
  prefs: []
  type: TYPE_NORMAL
- en: So for example I started by saying I like Thunder by Imagine Dragon and that
    is the。
  prefs: []
  type: TYPE_NORMAL
- en: input that is used by the system to start recommending songs and therefore that
    design。
  prefs: []
  type: TYPE_NORMAL
- en: is an item to item collaborative filter。 The other design essentially uses information
    about the user as an input and not a specific。
  prefs: []
  type: TYPE_NORMAL
- en: item。 This design is known as a user similarity based collaborative filter。
  prefs: []
  type: TYPE_NORMAL
- en: And so essentially what this design does is it looks at all our past history
    and looks。
  prefs: []
  type: TYPE_NORMAL
- en: at all the kinds of products that we have liked in the past and finds other
    people with。
  prefs: []
  type: TYPE_NORMAL
- en: similar preferences。 I mentioned that Netflix used a design previously where
    it essentially created personas of people。
  prefs: []
  type: TYPE_NORMAL
- en: and then found other people with similar persona and recommended what else they
    liked。
  prefs: []
  type: TYPE_NORMAL
- en: That is a user similarity based collaborative filter。
  prefs: []
  type: TYPE_NORMAL
- en: Another way both these designs don't require deep knowledge about the product
    being recommended。
  prefs: []
  type: TYPE_NORMAL
- en: As a result they are very easy to build and also very cheap to build and that
    is why they。
  prefs: []
  type: TYPE_NORMAL
- en: are also very popular。 The other aspect of their popularity is also that they
    are quite effective in practice。
  prefs: []
  type: TYPE_NORMAL
- en: So all of us are used to seeing recommendations on retail sites like Amazon
    or on sites like。
  prefs: []
  type: TYPE_NORMAL
- en: YouTube and we know they influence choices we make and indeed collaborative
    filter designs。
  prefs: []
  type: TYPE_NORMAL
- en: although they are much simpler than content based designs are equally effective
    and therefore。
  prefs: []
  type: TYPE_NORMAL
- en: are more popular because of the simplicity of their design。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8d0f308785593bbb33cd81d4af65190_13.png)'
  prefs: []
  type: TYPE_IMG
- en: At the same time there are some challenges with building these kinds of systems。
  prefs: []
  type: TYPE_NORMAL
- en: Whether you are building a content based recommender or a collaborative filter
    you have to contend。
  prefs: []
  type: TYPE_NORMAL
- en: with how much data you have and you need enough data to start making recommendations。
  prefs: []
  type: TYPE_NORMAL
- en: A collaborative filtering in particular leads a different kind of data set than
    content。
  prefs: []
  type: TYPE_NORMAL
- en: based recommenders。 Content based recommenders need a lot of information about
    the attributes of the products being。
  prefs: []
  type: TYPE_NORMAL
- en: recommended。 In contrast a collaborative filter uses information on what other
    people are consuming and so。
  prefs: []
  type: TYPE_NORMAL
- en: it requires a lot of information on what others are consuming。
  prefs: []
  type: TYPE_NORMAL
- en: And so one challenge in practice is that data might be sparse。
  prefs: []
  type: TYPE_NORMAL
- en: Given user might have only rated say five or six items in a catalog of millions
    of different。
  prefs: []
  type: TYPE_NORMAL
- en: videos or songs of a company and therefore now the company has to figure out
    how to recommend。
  prefs: []
  type: TYPE_NORMAL
- en: songs to people or videos to people based on these limited recommendations。
  prefs: []
  type: TYPE_NORMAL
- en: And these systems have to figure out how to use or similar to each other even
    though they。
  prefs: []
  type: TYPE_NORMAL
- en: have each rated just five songs in common and these five songs might actually
    be very。
  prefs: []
  type: TYPE_NORMAL
- en: different songs with very little overlap。 So sparse data is one problem。
  prefs: []
  type: TYPE_NORMAL
- en: The other problem is what is known as a cold start。
  prefs: []
  type: TYPE_NORMAL
- en: In other words a cold start is essentially the problem of how do you start making
    recommendations。
  prefs: []
  type: TYPE_NORMAL
- en: to new users when you have no information about their past choices of interests
    or preferences。
  prefs: []
  type: TYPE_NORMAL
- en: And also how do you recommend new items that have not yet been purchased by
    other people。
  prefs: []
  type: TYPE_NORMAL
- en: or not yet being rated by other people but have been just added to the catalog
    and you。
  prefs: []
  type: TYPE_NORMAL
- en: would like to start making recommendations。 And so that is another challenge。
  prefs: []
  type: TYPE_NORMAL
- en: So there are many design challenges so data scientists will spend a lot of time
    thinking。
  prefs: []
  type: TYPE_NORMAL
- en: through some of these design challenges but this is a field that is quite mature
    and there。
  prefs: []
  type: TYPE_NORMAL
- en: are some very good answers to these kinds of questions。
  prefs: []
  type: TYPE_NORMAL
- en: And so it is not very complicated today to build these systems。
  prefs: []
  type: TYPE_NORMAL
- en: Companies also have the option of using a third party system so if you don't
    want to build。
  prefs: []
  type: TYPE_NORMAL
- en: it yourself there are third party companies that provide recommendations product
    recommendations。
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8d0f308785593bbb33cd81d4af65190_15.png)'
  prefs: []
  type: TYPE_IMG
- en: as a service that companies can incorporate。 And so in summary there are many
    designs of recommendation systems。
  prefs: []
  type: TYPE_NORMAL
- en: The two most popular ones are content based designs and collaborative filtering
    designs。
  prefs: []
  type: TYPE_NORMAL
- en: These are very different designs in practice。 Both are quite effective and there
    are different tradeoffs with these designs and in later。
  prefs: []
  type: TYPE_NORMAL
- en: lectures we will actually explore some of these tradeoffs a little bit more。
    [BLANK_AUDIO]。
  prefs: []
  type: TYPE_NORMAL
