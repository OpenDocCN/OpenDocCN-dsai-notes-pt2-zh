- en: P55：55. L11_4 Padding and Stride - Python小能 - BV1CB4y1U7P6
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P55：55. L11_4 填充与步幅 - Python小能 - BV1CB4y1U7P6
- en: Okay。 Padding and stride。 So remember， when we do this convolution， right， then，
    you know。 our kernel scans over the image。 This is， you know， one of those infamous
    fashion， MNIST pullovers。 right， pullovers because the German， data set and the
    German virtual sweeter is pullover。 And so they translated it quite literally。
    Yeah。 So， anyway， so you have， like。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。填充和步幅。记住，当我们做卷积时，对吧，接着，嗯，你知道。我们的卷积核会扫描图像。这就是，你知道的，那个臭名昭著的时尚，MNIST 毛衣。对吧，毛衣，因为这是德国的数据集，德国的虚拟毛衣就是“pullover”。所以他们翻译得非常字面。是的。所以，反正，你有，像这样。
- en: a 32 by 32 input image。 And you apply a convolutional with a 5 by 5 kernel。
    And you get a 28 by 28 output after one layer。 And after seven layers， you have
    a 4 by 4 output。 And at that point， it's game over。 You can't convolve any further。
    You're out of pixels。 So。 in other words， your image keeps on shrinking with you。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 32×32 的输入图像。如果你应用一个 5×5 的卷积核，经过一层卷积，你会得到一个 28×28 的输出。经过七层卷积，你会得到一个 4×4 的输出。到那时，游戏结束了。你不能再继续卷积下去了。你已经没有像素了。所以，换句话说，你的图像会随着你不断缩小。
- en: always in the peeling things away at the fringes。 And if you have a really large
    image， well。 you know， you don't really care about maybe one or two pixels， of
    long friends， but after a while。 you start running out， of pixels。 And if your
    convolutional kernel is large， this goes very quickly。 So if you look at it， we
    have， you know， image height minus kernel height plus 1。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 总是从边缘开始去除内容。如果你有一张非常大的图像，嗯，你知道，你可能不太在意边缘的一两个像素，但是过一会儿，你会开始发现像素不够了。如果你的卷积核很大，这个过程会非常快。所以如果你看看它，我们有，嗯，图像高度减去卷积核高度再加
    1。
- en: Same thing for the width。 So what somebody is supposed to do in order to fix
    this， well。 actually very easily， you just add zeros around the image。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 宽度也是同样的道理。那么，为了解决这个问题，应该做什么呢？其实非常简单，你只需要在图像周围加上零。
- en: '![](img/24e4388fdc881dee8baa49a2d2635a10_1.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](img/24e4388fdc881dee8baa49a2d2635a10_1.png)'
- en: Like so。 And if you do that， you get the same size output as the input。 Just
    that in this case。 well， you also sum over some garbage， data， which conveniently
    happen to be zero， so it's not quite。 that bad， but， you know， it's one thing
    that you could do。 So in this case here， in the example。 well， we actually have，
    a 3 by 3 image convolved with a 2 by 2 kernel。 And if I did this naively。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。如果你这么做，你会得到与输入相同大小的输出。只是，在这种情况下，嗯，你也会对一些垃圾数据求和，而这些数据恰好为零，所以其实也不算太糟糕，但你知道，这也是你可以做的一种方法。所以在这里的例子中，嗯，我们实际上有一个
    3×3 的图像与 2×2 的卷积核进行卷积。如果我这样天真地做。
- en: well， I would get a 2 by 2 output。 Remember， that was the 1925， 37， and 43。
    But if I want to possibly even enlarge things， what I can do。 is I can just pad
    it with zeros all around。 And then I get larger output。 Now。 whether that larger
    output makes any sense， it's a different， question。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我会得到一个 2×2 的输出。记住，那是 1925，37 和 43。但如果我想可能将东西放大，我可以做的就是。将它周围填充零。然后我得到一个更大的输出。现在，这个更大的输出是否有意义，是另一个问题。
- en: but at least the shapes work out OK。 Any questions so far？ OK。 It's really simple
    stuff。 but it can get you if you're not。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 但至少形状上没问题。到目前为止有问题吗？好的。这些其实很简单的内容，但如果你不小心，可能会有问题。
- en: '![](img/24e4388fdc881dee8baa49a2d2635a10_3.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](img/24e4388fdc881dee8baa49a2d2635a10_3.png)'
- en: careful。 So a couple of common things is you take square kernels and， then you
    take odd numbers。 you basically take the height minus， 1， the floor of the-- well，
    height minus 1 divided by 2。 correspondingly the width。 If I have a 3 by 3 kernel，
    then I pad by 1 pixel left and。 right and bottom and top。 If I have a 5 by 5 kernel，
    well， I need two pixels on either。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 小心。所以有一些常见的做法是，使用方形卷积核，然后使用奇数尺寸。基本上，你取高度减去 1，然后取地板值，-- 嗯，高度减 1 除以 2。宽度也是同理。如果我有一个
    3×3 的卷积核，那么我在左右和上下各填充 1 个像素。如果我有一个 5×5 的卷积核，那么我需要在每一边加上 2 个像素。
- en: side and then things don't change shape。 And this will start to matter as we
    go and combine different。 convolutions of the same image together。 So， for instance。
    there's this architecture called Inception。 And for that。 this is vital because
    otherwise you won't be， able to， you know， pad things together。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 旁边的东西形状不会变化。当我们将不同的卷积合并在一起时，这将变得很重要。所以，例如，有一个叫做 Inception 的架构。对于它来说，这一点至关重要，因为否则你无法将东西，像你知道的那样，填充在一起。
- en: It just doesn't make any sense in terms of dimensionality。 Any questions？ So，
    let's go ahead。 So。 let's go ahead。 So， let's go ahead and put this in。 So， let's
    go ahead and put this in。 So。 let's go ahead and put this in。 So， let's go ahead
    and put this in。 So。 let's go ahead and put this in。 So， let's go ahead and put
    this in。 So。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 它在维度上没有任何意义。有问题吗？好吧，继续吧。我们继续。继续操作。继续操作。继续操作。继续操作。继续操作。继续操作。继续操作。所以。
- en: let's go ahead and put this in。 So， let's go ahead and put this in。 So。 let's
    go ahead and put this in。 So， let's go ahead and put this in。 So。 let's go ahead
    and put this in。 So， let's go ahead and put this in。 So。 let's go ahead and put
    this in。 So， let's go ahead and put this in。 So。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 继续操作。继续操作。继续操作。继续操作。继续操作。继续操作。继续操作。继续操作。继续操作。继续操作。
- en: let's go ahead and put this in。 Well， one reason is that those two-way two convolutions
    will change the size of the output。 relative to the input。 Unless you do weird
    things with a padding。 we only pad on one side rather than the other。 But that's
    really weird。 Okay。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 继续操作。一个原因是，这些二维卷积会改变输出的大小，相对于输入。除非你对填充做一些奇怪的处理，我们只在一边填充，而不是另一边。但那真的很怪。好吧。
- en: '![](img/24e4388fdc881dee8baa49a2d2635a10_5.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/24e4388fdc881dee8baa49a2d2635a10_5.png)'
- en: So， now， the next thing that we need is stride。 And so， in some cases。 we actually
    want to reduce the mentionality。 What you can do there is you don't really compute
    all the entries。 but you leave out， every second or maybe the second and the third
    or， you know。 basically you have a stride of K， at which you subsample the matrix。
    So。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在我们需要的是步幅。实际上，在某些情况下，我们希望减少维度。你可以做的是，不必计算所有的条目，而是跳过每隔一个，或者可能是每隔第二个和第三个条目，基本上你会有一个步幅为
    K 的子采样矩阵。所以。
- en: if you look at this matrix here， you might subsample only those entries。 Right。
    Maybe these as well。 You leave out everything else。 And this way， you can very
    quickly reduce the image-nality。 There are other sometimes more elegant ways of
    doing that， namely in combination with pooling。 where you may take the average
    or the maximum of adjacent pixels。 But at least with strides。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看这个矩阵，你可能只对这些条目进行子采样。对吧。可能这些也包括在内。把其他的都省略掉。通过这种方式，你可以非常快速地减少图像的维度。有时也有其他更优雅的方法来做到这一点，尤其是与池化结合使用，在那里你可能取相邻像素的平均值或最大值。但至少使用步幅时。
- en: you can also manipulate the size。 Okay。 Any other questions？ [ Inaudible ]，
    What they are？ Well。 these are different filters。 So， as you move over， you get
    this smaller one。 Okay。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以调整大小。好的。还有其他问题吗？[听不清]，那是什么？嗯，那些是不同的滤波器。随着你移动，得到的是这个更小的滤波器。好的。
- en: '![](img/24e4388fdc881dee8baa49a2d2635a10_7.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/24e4388fdc881dee8baa49a2d2635a10_7.png)'
- en: Let's actually have a look。 Here's what happens。 We have like a stride of two
    and three。 And， yeah。 you can see how this goes。 It's fairly straightforward and
    self-explanatory。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来看看实际情况。这里发生了什么。我们有步幅为二和三。嗯，你可以看到这个过程。它相当直接，易于理解。
- en: '![](img/24e4388fdc881dee8baa49a2d2635a10_9.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/24e4388fdc881dee8baa49a2d2635a10_9.png)'
- en: So， now here's a little bit of slightly more detailed reasoning。 So， if you
    have， you know。 certain stride， well， then what you do is， you use the， corresponding，
    you know。 output size divided by the stride， and you take the， floor of the corresponding
    integers。 The floor。 because， well， if there's not enough space left for another，
    jump， let's say， you know。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在这是稍微详细一点的推理。如果你有步幅，那么你所做的是，使用相应的输出大小除以步幅，然后取相应整数的地板值。地板值。因为，如果没有足够的空间来跳跃，譬如说，可能就不行了。
- en: the next row would be over there。 Well， that just doesn't make it。 So， you always
    run down。 Okay。 So， the good thing is that most modern deep running frameworks，
    by now， actually use。 automatic size and shape inference so you don't have to。
    So。 this sounds still kind of straightforward， but if you have maybe 50。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行会在那边。嗯，那就行不通。所以，你总是往下跑。好的。幸运的是，现在大多数现代深度学习框架其实已经使用了自动的尺寸和形状推断，你不需要自己做这些。所以，这听起来还是挺直观的，但如果你有可能是50个。
- en: layers and you change one layer， then all those changes will propagate through。
    the subsequent layers。 And so， it becomes ridiculously hard to write some code。
    So， in the quote。 old times when people， for instance， use cafe or whatever， cafe
    version one。 then you might have had a situation where you actually would， have
    had to write some， maybe。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 层次结构中，如果你改变了一层，那么所有这些更改将会传播到后续的层次。因此，编写一些代码变得极其困难。所以，在过去的时代，当人们使用 cafe 或者其他类似的工具时，例如
    cafe 版本一，你可能曾遇到过这样一种情况，你实际上需要写一些，可能是。
- en: Python code to generate a cafe definition script to， manipulate the various
    sizes。 So。 you would have to write some scripting code to generate code to generate
    a， deep network。 By now。 this is all automatic and you don't have to worry about
    it anymore。 So， last good。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 cafe 定义脚本的 Python 代码，用于操作不同的尺寸。所以，你需要编写一些脚本代码来生成代码，以生成一个深度网络。到现在为止，这一切都是自动化的，你不需要再担心了。所以，最后很好。
- en: '![](img/24e4388fdc881dee8baa49a2d2635a10_11.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/24e4388fdc881dee8baa49a2d2635a10_11.png)'
- en: And that's it for the strides。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，迈出了步伐。
